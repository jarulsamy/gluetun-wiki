{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udf8a Welcome to the Gluetun Wiki! \ud83c\udf8a","text":"<p>Gluetun is a VPN client in a thin Docker container for multiple VPN providers, written in Go. Gluetun utilizes OpenVPN or Wireguard and DNS over TLS, with a few proxy servers built-in.</p> <p>\ud83d\udc1b Found a bug in the Wiki?! Please create an issue.</p>"},{"location":"#versioning","title":"Versioning","text":"<p>Please use the appropriate version of the wiki depending on what version of Gluetun you are using.</p> Gluetun release tag Corresponding wiki <code>:latest</code> <code>main</code> branch <code>:v3.39.0</code> <code>v3.39.0</code> tag <code>:v3.38.0</code> <code>v3.38.0</code> tag <code>:v3.35.0</code> <code>v3.35.0</code> tag <p>The Wiki aims to mirror the release tags of Gluetun, except the Wiki bugfix version number (last number) is for Wiki fixes only.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Based on Alpine 3.20 for a small Docker image of 35.6MB</li> <li>Supports: AirVPN, Cyberghost, ExpressVPN, FastestVPN, Giganews, HideMyAss, IPVanish, IVPN, Mullvad, NordVPN, Perfect Privacy, Privado, Private Internet Access, PrivateVPN, ProtonVPN, PureVPN,  SlickVPN, Surfshark, TorGuard, VPNSecure.me, VPNUnlimited, Vyprvpn, WeVPN, Windscribe servers</li> <li>Supports OpenVPN for all providers listed</li> <li>Supports Wireguard both kernelspace and userspace<ul> <li>For AirVPN, FastestVPN, Ivpn, Mullvad, NordVPN, Perfect privacy, ProtonVPN, Surfshark and Windscribe</li> <li>For Cyberghost, Private Internet Access, PrivateVPN, PureVPN, Torguard, VPN Unlimited, VyprVPN and WeVPN using the custom provider</li> <li>For custom Wireguard configurations using the custom provider</li> <li>More in progress, see #134</li> </ul> </li> <li>DNS over TLS baked in with service provider(s) of your choice</li> <li>DNS fine blocking of malicious/ads/surveillance hostnames and IP addresses, with live update every 24 hours</li> <li>Choice of vpn network protocol, <code>udp</code> or <code>tcp</code></li> <li>Built in firewall kill switch to allow traffic only with needed the VPN servers and LAN devices</li> <li>Built in Shadowsocks proxy server (protocol based on SOCKS5 with an encryption layer, tunnels TCP+UDP)</li> <li>Built in HTTP proxy (tunnels HTTP and HTTPS through TCP)</li> <li>Compatible with amd64, i686 (32 bit), ARM 64 bit, ARM 32 bit v6 and v7, and even ppc64le \ud83c\udf86</li> <li>Custom VPN server side port forwarding for Perfect Privacy, Private Internet Access, PrivateVPN and ProtonVPN</li> <li>Possibility of split horizon DNS by selecting multiple DNS over TLS providers</li> <li>Can work as a Kubernetes sidecar container, thanks @rorph</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<p>For experienced users just looking for a <code>docker-compose.yml</code> template, refer to the following:</p> <pre><code>---\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    # container_name: gluetun\n    # line above must be uncommented to allow external containers to connect.\n    # See https://github.com/qdm12/gluetun-wiki/blob/main/setup/connect-a-container-to-gluetun.md#external-container-to-gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    ports:\n      - 8888:8888/tcp # HTTP proxy\n      - 8388:8388/tcp # Shadowsocks\n      - 8388:8388/udp # Shadowsocks\n    volumes:\n      - /yourpath:/gluetun\n    environment:\n      # See https://github.com/qdm12/gluetun-wiki/tree/main/setup#setup\n      - VPN_SERVICE_PROVIDER=ivpn\n      - VPN_TYPE=openvpn\n      # OpenVPN:\n      - OPENVPN_USER=\n      - OPENVPN_PASSWORD=\n      # Wireguard:\n      # - WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=\n      # - WIREGUARD_ADDRESSES=10.64.222.21/32\n      # Timezone for accurate log times\n      - TZ=\n      # Server list updater\n      # See https://github.com/qdm12/gluetun-wiki/blob/main/setup/servers.md#update-the-vpn-servers-list\n      - UPDATER_PERIOD=\n</code></pre>"},{"location":"Setup/connect-a-container-to-gluetun/","title":"Connect a container to Gluetun","text":"<p>There are various ways to connect a container to Gluetun.</p> <p>\ud83d\udca1 If you are connecting containers to Gluetun's network stack, you might want to also check the Port mapping page to know how to access ports of containers connected to Gluetun.</p>"},{"location":"Setup/connect-a-container-to-gluetun/#container-in-the-same-docker-composeyml","title":"Container in the same docker-compose.yml","text":"<p>Add <code>network_mode: \"service:gluetun\"</code> to your second container so that it uses the <code>gluetun</code> network stack.</p> <p>There is no need for <code>depends_on</code>.</p>"},{"location":"Setup/connect-a-container-to-gluetun/#external-container-to-gluetun","title":"External container to Gluetun","text":"<p>Add <code>--network=container:gluetun</code> when launching the container, provided Gluetun is already running.</p>"},{"location":"Setup/connect-a-container-to-gluetun/#container-in-another-docker-composeyml","title":"Container in another docker-compose.yml","text":"<p>Add <code>network_mode: \"container:gluetun\"</code> to your docker-compose.yml, provided Gluetun is already running.</p>"},{"location":"Setup/connect-a-lan-device-to-gluetun/","title":"Connect a LAN device to Gluetun","text":"<p>There are various ways to connect a device to Gluetun.</p>"},{"location":"Setup/connect-a-lan-device-to-gluetun/#http-proxy","title":"HTTP proxy","text":"<p>This is useful for some clients such as Chrome, Firefox or Kodi.</p> <p>\u26a0\ufe0f This is fine to use as long as you connect to Gluetun within your network. Your credentials and plaintext traffic (non HTTPS) are left unencrypted from your client device to gluetun. You might want to use Shadowsocks instead which tunnels UDP as well as TCP and encrypts your entire traffic.</p> <ol> <li>Setup an HTTP proxy client, such as SwitchyOmega for Chrome</li> <li>Ensure the Gluetun container is launched with:<ul> <li>the environment variable <code>-e HTTPPROXY=on</code></li> <li>the port <code>8888</code> published <code>-p 8888:8888/tcp</code></li> </ul> </li> <li>With your HTTP proxy client, connect to the Docker host (i.e. <code>192.168.1.10</code>) on port <code>8888</code>. You need to enter your credentials if you set them with <code>HTTPPROXY_USER</code> and <code>HTTPPROXY_PASSWORD</code>. Note that Chrome does not support authentication.</li> <li>If you set <code>HTTPPROXY_LOG</code> to <code>on</code>, more information will be logged in the Docker logs.</li> </ol> <p>The HTTP proxy server will also work as a an RFC 2817-compliant CONNECT proxy, meaning you can tunnel protocol to arbitrary destination ports through it, not just HTTP.</p> <ul> <li>A good example of this is using it in conjunction with netcat (<code>nc</code>) and the OpenSSH command line client's ProxyCommand option:</li> <li><code>ssh -o 'ProxyCommand nc -X connect -x 192.168.1.10:8888 %h %p' ssh-server.example.org</code></li> <li>PuTTY can also use CONNECT proxies.</li> </ul>"},{"location":"Setup/connect-a-lan-device-to-gluetun/#shadowsocks-proxy","title":"Shadowsocks proxy","text":"<ol> <li>Setup a Shadowsocks proxy client, there is a list of ShadowSocks clients for all platforms<ul> <li>note some clients do not tunnel UDP so your DNS queries will be done locally and not through Gluetun and its built in DNS over TLS</li> <li>Clients that support such UDP tunneling are, as far as I know:<ul> <li>iOS: Potatso Lite</li> <li>OSX: ShadowsocksX</li> <li>Android: Shadowsocks by Max Lv</li> </ul> </li> </ul> </li> <li>Ensure the Gluetun container is launched with:<ul> <li>the environment variable <code>-e SHADOWSOCKS=on</code></li> <li>the port <code>8388</code> published for both tcp and udp <code>-p 8388:8388/tcp -p 8388:8388/udp</code></li> </ul> </li> <li>With your Shadowsocks proxy client<ul> <li>Enter the Docker host (i.e. <code>192.168.1.10</code>) as the server IP</li> <li>Enter port TCP (and UDP, if available) <code>8388</code> as the server port</li> <li>Use the password you have set with <code>SHADOWSOCKS_PASSWORD</code></li> <li>Choose the encryption method/algorithm to the method you specified in <code>SHADOWSOCKS_CIPHER</code></li> </ul> </li> <li>If you set <code>SHADOWSOCKS_LOG</code> to <code>on</code>, (a lot) more information will be logged in the Docker logs</li> </ol>"},{"location":"Setup/connect-a-lan-device-to-gluetun/#access-your-lan-through-gluetun","title":"Access your LAN through Gluetun","text":"<p>You first need to set your LAN CIDR in <code>FIREWALL_OUTBOUND_SUBNETS</code>. For example with <code>-e FIREWALL_OUTBOUND_SUBNETS=192.168.1.0/24</code>.</p> <p>You can then use any of the proxy servers built-in Gluetun (such as Shadowsocks) to access your LAN.</p>"},{"location":"Setup/docker-image-tags/","title":"Docker image tags","text":"<p>If you use the default <code>qmcgaw/gluetun</code> image, you are technically using the Docker image with the <code>:latest</code> tag. This image tag points to the last commit of the master branch, which is the edge of development. But if it becomes broken, then this page is for you!</p>"},{"location":"Setup/docker-image-tags/#release-tags","title":"Release tags","text":"<p>\u2139\ufe0f Live list of recent image tags</p> <p>Multiple releases are made through time when the image is considered stable.</p> <p>Each time a Github release is made, an associated Docker image tag is made, for example a <code>v3.1.0</code> release produces the image <code>qmcgaw/gluetun:v3.1.0</code>.</p> <p>You can thus use one of these image tags if <code>:latest</code> doesn't work for you. Also, don't forget to create an issue for it \ud83d\ude09</p> <p>Finally you can also use image tag <code>:v3</code> to get the latest stable release (for example <code>v3.28.2</code>), although I would appreciate if you can use the latest image instead to detect issues faster.</p>"},{"location":"Setup/docker-image-tags/#why-is-latest-pointing-to-the-edge-of-development","title":"Why is <code>:latest</code> pointing to the edge of development?","text":"<p>Essentially, I favorise release image tags (<code>v3.x.x</code>) stability and earlier fixes over having more users using the unstable version of the program.</p> <p>It is documented you can use the <code>:v3</code> image tag, in the section above as well as in the root page of the Wiki, but several users don't read this and keep using the <code>:latest</code> tag. There is no <code>:dev</code> tag or similar, since I doubt many people would use it, and that would hurt the development process (see below).</p> <p>Making users use the latest code is not a selfish and/or lazy approach, Gluetun needs a lot of human testers because:</p> <ul> <li>Gluetun is somehow coupled with the host system, kernel and network setup. This is nearly impossible to test automatically, especially given the limited development resources.</li> <li>Gluetun supports many providers, each with their own quirks and compatibility issues. Again, not really possible to test automatically.</li> </ul> <p>On the bright side, my release process consists in:</p> <ol> <li>Right after a release, and up to 1 month after the release, work on large changes that could possibly (hopefully not) break the latest program</li> <li>Approximately 2 months after a release, focus on urgent bug issues</li> <li>once all bugs are fixed, wait a week and do not touch the code, to see if a bug issue is reported</li> <li>if no bug issue is reported, release the new version</li> </ol> <p>Which hence creates rather stable releases.</p> <p>More debates on this topic: #556, #2387</p>"},{"location":"Setup/getting_started/","title":"Getting started","text":"<p>If this is your first time, and are you a...</p> <ul> <li>Raspberry Pi OR 32 bit OS user? Check out the 32 bit prerequisites page</li> <li>Synology user? Check out the Synology prerequisites page</li> </ul> <p>Then go to the providers directory and pick your VPN provider to get started.</p> <p>Do you want to use Wireguard with a custom configuration? Check out the Custom provider page.</p> <p>Other setup pages are available in this directory, notably:</p> <ul> <li>Connect a container to gluetun</li> <li>Connect a LAN device to gluetun</li> <li>Port mapping</li> <li>Docker image tags</li> <li>Servers listing and updating</li> <li>Wireguard</li> </ul> <p>\ud83d\udc1b Found a bug in the Wiki?! Please create an issue</p>"},{"location":"Setup/inter-containers-networking/","title":"Inter-containers networking","text":""},{"location":"Setup/inter-containers-networking/#between-gluetun-connected-containers","title":"Between Gluetun-connected containers","text":"<p>Containers connected to Gluetun are under the same network host (Gluetun).</p> <p>Therefore, they should reach each other through <code>localhost</code> (or <code>127.0.0.1</code>) on the right port.</p> <p>Note two containers cannot listen on the same port in this case, there is no workaround. You might have to reach out to the program author to have a configurable listening port to avoid conflicts.</p>"},{"location":"Setup/inter-containers-networking/#between-a-gluetun-connected-container-and-another-container","title":"Between a Gluetun-connected container and another container","text":"<p>For the purpose of this explanation:</p> <ul> <li>The Gluetun-connected container is named <code>A</code> and listens on port <code>5678</code></li> <li>The non-Gluetun-connected container is named <code>B</code> and listens on port <code>8765</code>.</li> </ul> <p>First of all, both Gluetun and <code>B</code> must be in the same Docker network. You can check this with:</p> <pre><code>docker inspect gluetun -f \"{{json .NetworkSettings.Networks }}\"\ndocker inspect B -f \"{{json .NetworkSettings.Networks }}\"\n</code></pre> <p>Container <code>B</code> should be able to reach container <code>A</code> by using <code>gluetun:5678</code>. There is no need to publish ports on Gluetun in this case.</p> <p>On the other hand, container <code>A</code> cannot reach container <code>B</code> by using <code>B:8765</code>. This is due to the current DNS over TLS server which does not communicate with the Docker network DNS server. As a consequence, resolution of containers does not work from Gluetun. You can subscribe to #281 to know when this is resolved.</p> <p>The current workaround is to use an IP address to reach <code>B</code>:</p> <ol> <li> <p>Create a new bridged network</p> <pre><code>docker network create --subnet=172.18.0.0/16 gluetun_network\n</code></pre> </li> <li> <p>In your <code>B</code> container definition, specify to use this network together with a fixed IP address:</p> <pre><code>docker run --net gluetun_network --ip 172.18.0.22 an/imagename:tag\n</code></pre> <p>or for docker-compose.yml:</p> <pre><code>version: '3'\nservices:\n  B:\n    image: an/imagename:tag\n    networks:\n      gluetun_network:\n        ipv4_address: 172.18.0.22\n\nnetworks:\n  gluetun_network:\n    external: true\n</code></pre> </li> <li> <p>Change the Gluetun container definition such that it uses the new network <code>gluetun_network</code>:</p> <pre><code>docker run --net gluetun_network ... qmcgaw/gluetun\n</code></pre> <p>or for docker-compose.yml:</p> <pre><code>version: '3'\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    # ...\n    networks:\n      gluetun_network:\n\nnetworks:\n  gluetun_network:\n    external: true\n</code></pre> <p>Note you do not have to specify a fixed IP address here.</p> </li> <li> <p>You can now access container <code>B:8765</code> from the Gluetun-connected container <code>A</code> by using <code>172.18.0.22:8765</code>.</p> </li> </ol>"},{"location":"Setup/openvpn-configuration-file/","title":"OpenVPN configuration file","text":"<p>You can use an Openvpn configuration file instead of using the built in providers.</p>"},{"location":"Setup/openvpn-configuration-file/#warnings","title":"Warnings","text":"<ul> <li>There is some implicit behavior that you should be aware of.</li> <li>If you encounter any issue, please first open a discussion and then, if it's a valid issue, open an issue.</li> <li>My support will be limited from my part as I can't help everyone with VPN providers or private VPN servers I am not familiar with.</li> <li>If you want a smooth experience, create an issue to support a new provider, it usually takes 2 to 4 weeks to implement it.</li> </ul>"},{"location":"Setup/openvpn-configuration-file/#setup","title":"Setup","text":"<p>In the following we assume your custom openvpn configuration file is named <code>custom.conf</code>. Note this can be named something else, for example <code>autralia.ovpn</code>.</p> <ol> <li>Replace the VPN server hostname by one of its IP addresses. In <code>custom.conf</code>, find the line starting with <code>remote</code>. The second field is the VPN server hostname. If it is not an IP address, you need to DNS resolve it, for example with <code>nslookup domain.com</code> and replace the hostname field with one of its corresponding IP addresses. This is the case as gluetun's firewall is designed not to leak anything including an initial DNS resolution when starting.</li> <li>Bind mount your <code>custom.conf</code> file to <code>/gluetun/custom.conf</code>. If you have other files such as <code>ca.crt</code> or <code>up.sh</code>, bind mount them to <code>/gluetun/</code> as well.</li> <li>If you have other files referenced in your <code>custom.conf</code> such as <code>ca ca.crt</code> or <code>up up.sh</code>, change the paths to be absolute such as <code>ca /gluetun/ca.crt</code> and <code>up /gluetun/up.sh</code>. This is because your configuration file <code>custom.conf</code> is read, parsed, modified and written somewhere else at runtime.</li> <li>Set the environment variables:<ul> <li><code>VPN_SERVICE_PROVIDER=custom</code></li> <li><code>OPENVPN_CUSTOM_CONFIG=/gluetun/custom.conf</code></li> </ul> </li> <li>The environment variables <code>OPENVPN_USER</code> and <code>OPENVPN_PASSWORD</code> are not enforced but should be set if you use authentication.</li> <li> <p>Run the container for example with:</p> <pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun -e VPN_SERVICE_PROVIDER=custom -e OPENVPN_CUSTOM_CONFIG=/gluetun/custom.conf -v /yourpath/custom.conf:/gluetun/custom.conf:ro -e OPENVPN_USER=\"youruser\" -e OPENVPN_PASSWORD=\"yourpassword\" qmcgaw/gluetun\n</code></pre> </li> </ol>"},{"location":"Setup/openvpn-configuration-file/#implicit-behavior","title":"Implicit behavior","text":""},{"location":"Setup/openvpn-configuration-file/#relative-file-paths","title":"Relative file paths","text":"<p>Files referenced in your OpenVPN configuration file as relative file paths will not work. This is because your configuration file is read, parsed, modified and rewritten to <code>/etc/openvpn/target.ovpn</code> (subject to change). You could however adapt these file paths to match that directory, or use absolute paths.</p>"},{"location":"Setup/openvpn-configuration-file/#multiple-remote-options","title":"Multiple remote options","text":"<p>If you have multiple <code>remote</code> instructions, only the first one is taken into account.</p>"},{"location":"Setup/openvpn-configuration-file/#added-options","title":"Added options","text":"<p>Gluetun adds or overrides the following options:</p> <pre><code>mute-replay-warnings\nsuppress-timestamps\nauth-nocache\nauth-retry nointeract\nauth-user-pass /etc/openvpn/auth.conf\npull-filter ignore \"auth-token\"\n</code></pre>"},{"location":"Setup/openvpn-configuration-file/#environment-variables","title":"Environment variables","text":""},{"location":"Setup/openvpn-configuration-file/#options-overridden","title":"Options overridden","text":"<ul> <li><code>OPENVPN_VERBOSITY</code> defaults to <code>1</code> and adds or overrides the <code>verb</code> option.</li> <li><code>VPN_INTERFACE</code> defaults to <code>tun0</code> and adds or overrides the <code>dev</code> option.</li> <li>If <code>OPENVPN_PROCESS_USER=root</code> (default), the <code>user</code> options is removed so OpenVPN runs as root. Otherwise, <code>user ${OPENVPN_PROCESS_USER}</code> option is added or overridden.</li> <li> <p>If IPv6 is not supported, the following options are added:</p> <pre><code>pull-filter ignore \"route-ipv6\"\npull-filter ignore \"ifconfig-ipv6\"\n</code></pre> <p>And the <code>tun-ipv6</code> option is removed.</p> </li> </ul>"},{"location":"Setup/openvpn-configuration-file/#options-overridden-if-variables-are-set","title":"Options overridden if variables are set","text":"<ul> <li><code>OPENVPN_CIPHERS</code>, if set, adds or overrides <code>data-ciphers</code> and <code>data-ciphers-fallback</code></li> <li><code>OPENVPN_AUTH</code>, if set, adds or overrides <code>auth</code>.</li> <li><code>OPENVPN_MSSFIX</code>, if set, adds or overrides <code>mssfix</code>.</li> <li><code>OPENVPN_ENDPOINT_PORT</code>, if set, overrides the port of the remote connection found in the file.</li> </ul>"},{"location":"Setup/openvpn-configuration-file/#ignored-variables","title":"Ignored variables","text":"<p>The following OpenVPN environment variables have no effect:</p> <ul> <li><code>OPENVPN_PROTOCOL</code> - the protocol is determined from your configuration file only.</li> <li><code>OPENVPN_CLIENTKEY_SECRETFILE</code></li> <li><code>OPENVPN_CLIENTCRT_SECRETFILE</code></li> <li><code>OPENVPN_ENCRYPTED_KEY_SECRETFILE</code></li> <li><code>OPENVPN_KEY_PASSHPRASE_SECRETFILE</code></li> <li><code>OPENVPN_ENDPOINT_IP</code></li> </ul>"},{"location":"Setup/port-mapping/","title":"Port mapping","text":"<p>You can access ports of containers connected to gluetun by port mapping ports on the <code>gluetun</code> container.</p> <p>For example, to access port <code>9000</code> of container <code>xyz</code> connected to Gluetun, publish port <code>9000:9000</code> for the Gluetun container and access it at localhost:9000.</p> <p>The corresponding docker-compose.yml would look like:</p> <pre><code>version: '3'\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    container_name: gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - OPENVPN_USER=js89ds7\n      - OPENVPN_PASSWORD=8fd9s239G\n    ports:\n      - 9000:9000/tcp\n  xyz:\n    image: xyz\n    container_name: xyz\n    network_mode: \"service:gluetun\"\n</code></pre> <p>\ud83d\udc81 To run multiple instances of the same container image through Gluetun, you need to configure each instance to listen on a different port internally, or it would conflict. This is possible for example with Deluge, but not with some Transmission images. You can however create an issue on the relevant repository for maintainers to implement this, since it's usually rather easy to code.</p>"},{"location":"Setup/readme/","title":"Setup","text":"<p>If this is your first time, and are you a...</p> <ul> <li>Raspberry Pi OR 32 bit OS user? Check out the 32 bit prerequisites page</li> <li>Synology user? Check out the Synology prerequisites page</li> </ul> <p>Then go to the providers directory and pick your VPN provider to get started.</p> <p>Do you want to use Wireguard with a custom configuration? Check out the Custom provider page.</p> <p>Other setup pages are available in this directory, notably:</p> <ul> <li>Connect a container to gluetun</li> <li>Connect a LAN device to gluetun</li> <li>Port mapping</li> <li>Docker image tags</li> <li>Servers listing and updating</li> <li>Wireguard</li> </ul> <p>\ud83d\udc1b Found a bug in the Wiki?! Please create an issue</p>"},{"location":"Setup/servers/","title":"VPN servers","text":""},{"location":"Setup/servers/#list-of-vpn-servers","title":"List of VPN servers","text":"<p>To list the VPN servers available for a particular VPN provider using your current Gluetun version, use:</p> <pre><code>docker run --rm -v /yourpath:/gluetun qmcgaw/gluetun format-servers -yourprovider\n</code></pre> <p>where:</p> <ul> <li><code>/yourpath</code> is the path to your bind mounted directory</li> <li><code>yourprovider</code> is your VPN provider in lowercase without quotes, for example <code>protonvpn</code> or <code>private-internet-access</code>.</li> </ul> <p>This will list the servers in Markdown format, for example:</p> <pre><code>| Country | City | Hostname | TCP | UDP |\n| --- | --- | --- | --- | --- |\n| Albania |  | `albania-ca-version-2.expressnetw.com` | \u274c | \u2705 |\n...\n| Vietnam |  | `vietnam-ca-version-2.expressnetw.com` | \u274c | \u2705 |\n</code></pre> <p>This is useful to know what are the currently available server filter options which can be used.</p> <p>For certain providers such as NordVPN, the list of servers is very long and you can use the <code>--output=/gluetun/servers-list.md</code> flag to write to a file.</p>"},{"location":"Setup/servers/#update-the-vpn-servers-list","title":"Update the VPN servers list","text":"<p>The VPN servers list used by Gluetun is the merged list from:</p> <ul> <li>the built-in Gluetun servers list</li> <li>your locally bind mounted <code>/gluetun/servers.json</code> file, which reflects the built-in servers list by default</li> </ul> <p>The built-in servers list can become outdated. You can update your servers list <code>/gluetun/servers.json</code>, using the built-in update mechanisms.</p>"},{"location":"Setup/servers/#update-periodically","title":"Update periodically","text":"<p>By default this is disabled.</p> <p>You can set the environment variable <code>UPDATER_PERIOD</code> to <code>24h</code> for example. Every 24 hours, after the tunnel is ready, the container will update the servers information for the currently in-use VPN service provider. This has this advantage the update is done through the VPN and using DNS over TLS.</p> <p>This periodic update can be extended to update data for other providers by setting them as a comma separated value in the environment variable <code>UPDATER_VPN_SERVICE_PROVIDERS</code>.</p> <p>\ud83d\udea8 Report a servers update bug</p>"},{"location":"Setup/servers/#update-using-the-command-line","title":"Update using the command line","text":"<p>\ud83d\udc81 This technique is useful in case all the built-in servers data is now outdated, and you can no longer connect to any VPN server. Otherwise you should prefer using the periodic update.</p> <p>\u26a0\ufe0f This will show your ISP/Government/Sniffing actors that you access some VPN service providers and, depending on the VPN provider you use, try to resolve their server hostnames. That might not be the best solution depending on your location. Plus some of the requests might be blocked, hence not allowing certain server information to be updated.</p> <p>The command is of the form:</p> <pre><code>docker run --rm -v /yourpath:/gluetun qmcgaw/gluetun update -enduser -providers yourprovider\n</code></pre> <p>where:</p> <ul> <li><code>/yourpath</code> is the path to your bind mounted directory</li> <li><code>yourprovider</code> is your VPN provider, for example <code>protonvpn</code>.</li> </ul> <p>You can also run this with <code>docker-compose</code> using:</p> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    # ...\n    volumes:\n      /yourpath:/gluetun\n    command: update -enduser -providers mullvad\n</code></pre> <p>\ud83d\udea8 Report a servers update bug</p>"},{"location":"Setup/test-your-setup/","title":"Test your setup","text":"<p>Once your container is up and running, you can test your connection is correct and secured (purely optional).</p>"},{"location":"Setup/test-your-setup/#check-your-ip-address","title":"Check your IP address","text":"<p>Assuming your container is called <code>gluetun</code>, run:</p> <pre><code>docker run --rm --network=container:gluetun alpine:3.20 sh -c \"apk add wget &amp;&amp; wget -qO- https://ipinfo.io\"\n</code></pre> <p>in order to obtain the VPN IP address and ensure the connection is working.</p>"},{"location":"Setup/test-your-setup/#check-dns-over-tls","title":"Check DNS over TLS","text":"<p>Ideally, use a computer and connect to <code>gluetun</code> using a Shadowsocks client tunneling UDP (for DNS) to test the following:</p> <ul> <li>Check DNSSEC using internet.nl/connection</li> <li>Check DNS leaks with https://www.dnsleaktest.com</li> <li>Some other DNS leaks tests might not work because of this (TLDR: Unbound DNS server is a local caching intermediary)</li> </ul>"},{"location":"Setup/wireguard/","title":"Wireguard","text":""},{"location":"Setup/wireguard/#native-integrations","title":"Native integrations","text":"<p>Gluetun supports Wireguard with native integration for the following providers:</p> <ul> <li>AirVPN</li> <li>Ivpn</li> <li>Mullvad</li> <li>NordVPN</li> <li>ProtonVPN</li> <li>Surfshark</li> <li>Windscribe</li> </ul> <p>And you should refer to their respective page to set up easily Wireguard with them.</p>"},{"location":"Setup/wireguard/#custom-setup","title":"Custom setup","text":"<p>Gluetun supports custom Wireguard client configurations.</p> <p>This is especially useful with providers such as Torguard and VPN Unlimited.</p> <p>See the custom provider for more details on how to use this.</p>"},{"location":"Setup/wireguard/#available-options","title":"Available options","text":"<p>Available options are listed in options/wireguard.</p>"},{"location":"Setup/Advanced/control-server/","title":"Control server","text":"<p>The HTTP control server allows to obtain and modify the state of the container without restarting it.</p> <p>\u26a0\ufe0f If you use a release before v3.39.1, make sure you trust whatever is accessing the control server, as it allows to access the settings, including credentials, and modify the settings of Gluetun 'on-the-fly'.</p>"},{"location":"Setup/Advanced/control-server/#setup","title":"Setup","text":"<p>A built-in HTTP server listens on port <code>8000</code> to modify the state of the container.</p> <p>To access it, simply publish this port for the container, for example: <code>-p 8000:8000/tcp</code>.</p> <p>We assume every request described in the following is run on <code>http://&lt;your-docker-host-ip&gt;:8000</code> as base.</p>"},{"location":"Setup/Advanced/control-server/#authentication","title":"Authentication","text":"<p>\u26a0\ufe0f all routes will become private by default after the v3.40.0 release \u26a0\ufe0f</p>"},{"location":"Setup/Advanced/control-server/#configuration","title":"Configuration","text":"<ol> <li> <p>Create a file <code>/yourpath/config.toml</code> on your host, for example with the content:</p> <pre><code>[[roles]]\nname = \"qbittorrent\"\n# Define a list of routes with the syntax \"Http-Method /path\"\nroutes = [\"GET /v1/openvpn/portforwarded\"]\n# Define an authentication method with its parameters\nauth = \"basic\"\nusername = \"myusername\"\npassword = \"mypassword\"\n</code></pre> <p>You can define multiple roles by adding more <code>[[roles]]</code>, and authentication methods are described in the section below.</p> </li> <li> <p>Bind mount the file you created to <code>/gluetun/auth/config.toml</code>. This container path can be changed with <code>HTTP_CONTROL_SERVER_AUTH_CONFIG_FILEPATH</code> if needed.</p> </li> <li>Restart the container for the configuration file to take effect.</li> </ol>"},{"location":"Setup/Advanced/control-server/#authentication-methods","title":"Authentication methods","text":"<ul> <li> <p><code>none</code>: no authentication is required, and can be set with only</p> <pre><code>auth = \"none\"\n</code></pre> </li> <li> <p><code>basic</code>: http basic authentication with a username and password, and can be set with</p> <pre><code>auth = \"basic\"\nusername = \"myusername\"\npassword = \"mypassword\"\n</code></pre> </li> <li> <p><code>apikey</code>: the client sends the API key in the <code>X-API-Key</code> HTTP header, and can be set with</p> <pre><code>auth = \"apikey\"\napikey = \"myapikey\"\n</code></pre> <p>You can generate an API key by running <code>docker run --rm qmcgaw/gluetun genkey</code> which will ouptut a 22 character base 58 value which is suitable as an <code>apikey</code>.</p> </li> </ul>"},{"location":"Setup/Advanced/control-server/#default-behavior","title":"Default behavior","text":"<ul> <li>Authentication configuration file specified: any server route not defined in the configuration will not be accessible.</li> <li>No authentication configuration file specified:</li> <li>new, existing+undocumented and existing+documented+sensitive routes must be defined in the authentication configuration to be accessible.</li> <li>existing, documented and non-sensitive routes (i.e. <code>GET /v1/openvpn/portforwarded</code>) are publicly accessibly UNTIL after the v3.40.0 release \u26a0\ufe0f</li> </ul>"},{"location":"Setup/Advanced/control-server/#security-over-the-internet","title":"Security over the Internet","text":"<p>If you expose the server over the Internet, make sure you use TLS to exchange data with the server \u26a0\ufe0f You can do so for example by using an http reverse proxy such as Caddy. If you don't, anyone between your client device and Gluetun can see the data exchanged, including credentials.</p>"},{"location":"Setup/Advanced/control-server/#openvpn-and-wireguard","title":"OpenVPN and Wireguard","text":"<p>The HTTP control server allows to modify the state of OpenVPN and Wireguard. The path are in the root <code>/v1/openvpn/</code> due to historical reasons, and will be migrated in the future.</p> <ul> <li>HTTP GET to <code>/v1/openvpn/status</code> to obtain the current status of Openvpn, such as <code>{\"status\":\"running\"}</code></li> <li>HTTP PUT to <code>/v1/openvpn/status</code> with a body <code>{\"status\":\"running\"}</code> to start Openvpn (and stop Wireguard)</li> <li>HTTP PUT to <code>/v1/openvpn/status</code> with a body <code>{\"status\":\"stopped\"}</code> to stop Openvpn if it's running</li> <li>HTTP GET to <code>/v1/openvpn/portforwarded</code> to obtain the port forwarded such as <code>{\"port\":5914}</code></li> <li>HTTP GET to <code>/v1/openvpn/settings</code> to obtain the settings used by Openvpn (not Wireguard) in a JSON format</li> </ul>"},{"location":"Setup/Advanced/control-server/#dns","title":"DNS","text":"<p>The HTTP control server allows to modify the state of Unbound, which is the subprocess responsible for DNS over TLS.</p> <ul> <li>HTTP GET to <code>/v1/dns/status</code> to obtain the current status of Unbound, such as <code>{\"status\":\"running\"}</code></li> <li>HTTP PUT to <code>/v1/dns/status</code> with a body <code>{\"status\":\"running\"}</code> to start Unbound</li> <li>HTTP PUT to <code>/v1/dns/status</code> with a body <code>{\"status\":\"stopped\"}</code> to stop Unbound</li> </ul>"},{"location":"Setup/Advanced/control-server/#updater","title":"Updater","text":"<p>The updater can be triggered to update all the VPN server information while the container is running.</p> <ul> <li>HTTP GET to <code>/v1/updater/status</code> to obtain the current status of the updater, such as <code>{\"status\":\"completed\"}</code></li> <li>HTTP PUT to <code>/v1/updater/status</code> with a body <code>{\"status\":\"running\"}</code> to start the updater job</li> <li>HTTP PUT to <code>/v1/updater/status</code> with a body <code>{\"status\":\"stopped\"}</code> to stop the updater job</li> </ul>"},{"location":"Setup/Advanced/control-server/#public-ip","title":"Public IP","text":"<p>You can obtain your current VPN public IP address by sending an HTTP GET request to <code>/v1/publicip/ip</code>. The response will look like:</p> <pre><code>{\"public_ip\":\"58.98.64.104\"}\n</code></pre>"},{"location":"Setup/Advanced/docker-secrets/","title":"Docker secrets","text":"<p>\ud83d\udc81 Note this is a bit pointless, since gluetun already takes care of unsetting sensitive environment variables after reading them at start.</p> <p>If you use Docker Compose or Docker Swarm, you can optionally use Docker secret files for all sensitive values such as your Openvpn credentials, instead of using environment variables.</p> <p>The following secrets can be used:</p> <ul> <li><code>openvpn_user</code></li> <li><code>openvpn_password</code></li> <li><code>openvpn_clientkey</code></li> <li><code>openvpn_encrypted_key</code></li> <li><code>openvpn_key_passphrase</code></li> <li><code>openvpn_clientcrt</code></li> <li><code>wireguard_conf</code></li> <li><code>wireguard_private_key</code></li> <li><code>wireguard_preshared_key</code></li> <li><code>wireguard_addresses</code></li> <li><code>httpproxy_user</code></li> <li><code>httpproxy_password</code></li> <li><code>shadowsocks_password</code></li> </ul> <p>Note that you can change the secret file path in the container by changing the environment variable in the form <code>&lt;capitalizedSecretName&gt;_SECRETFILE</code>. For example, <code>OPENVPN_PASSWORD_SECRETFILE</code> defaults to <code>/run/secrets/openvpn_password</code> which you can change.</p>"},{"location":"Setup/Advanced/ipv6/","title":"IPv6","text":"<p>\ud83d\udc81 @Vexz00 confirmed nothing is leaking using IPv6 \ud83c\udf89</p> <p>If you find something suspect related to IPv6, please create an issue on this repository \ud83d\ude09</p>"},{"location":"Setup/Advanced/ipv6/#setup","title":"Setup","text":"<ol> <li> <p>Ensure your Kernel has IPv6</p> <pre><code>lsmod | grep ipv6\n</code></pre> <p>Should show something. 1. On your Docker host, edit and create if needed <code>/etc/docker/daemon.json</code> with the following JSON key-value pairs:</p> <pre><code>{\n  \"ipv6\": true,\n  \"fixed-cidr-v6\": \"2001:db8:1::/64\",\n  \"experimental\": true,\n  \"ip6tables\": true\n}\n</code></pre> <p>\u26a0\ufe0f Ensure to change the documented address <code>2001:db8:1::/64</code> with a valid IPv6 network. The default IPv4 pools are from the private address range, the IPv6 equivalent would be ULA networks.</p> <p>Reference: Docker documentation on IPv6 1. Restart the Docker daemon to reload its JSON configuration. Most Linux distributions use <code>sudo systemctl restart docker</code> to do this. 1. Edit your Gluetun <code>docker-compose.yml</code> and add the <code>sysctls</code> section:</p> <pre><code>services:\n  gluetun:\n    # ...\n    sysctls:\n      - net.ipv6.conf.all.disable_ipv6=0\n</code></pre> </li> <li> <p>Depending on the VPN protocol used:</p> <ul> <li>OpenVPN: the IPv6 server address and configuration will automatically be picked up if IPv6 support is detected</li> <li>Wireguard: modify the <code>WIREGUARD_ADDRESSES</code> value to have both an IPv4 and IPv6 address. Note if you only set an IPv6 Wireguard address, all IPv4 traffic won't go through which is undesirable.</li> </ul> </li> <li>Test your setup:<ol> <li>Launch your docker-compose stack</li> <li> <p>Run:</p> <pre><code>sudo docker run --rm --network=container:gluetun alpine:3.20 sh -c \"apk add curl &amp;&amp; curl -6 --silent https://ipv6.ipleak.net/json/\"\n</code></pre> <p>And this should show the IPv6 address of the VPN server.</p> </li> </ol> </li> </ol>"},{"location":"Setup/Advanced/kubernetes/","title":"Kubernetes","text":""},{"location":"Setup/Advanced/kubernetes/#common-errors","title":"Common errors","text":""},{"location":"Setup/Advanced/kubernetes/#adding-ipv6-rule-file-exists","title":"<code>adding IPv6 rule: ...: file exists</code>","text":"<p>This is caused by two factors:</p> <ol> <li>Kubernetes shares IP rules across the entire pod even if multiple Gluetun containers are running in the same pod</li> <li>Abrupt Gluetun exits which can be caused by a node shutdown, power event or just Gluetun hanging at shutdown (I'm working on fixing this)</li> </ol> <p>To resolve this, change the update strategy from <code>RollingUpdate</code> to <code>Recreate</code> strategy AND add post start command to ensure IP rules are deleted, for example for Wireguard:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nspec:\n  strategy:\n    type: Recreate\n    spec:\n      containers:\n        - name: vpn\n          image: qmcgaw/gluetun\n          lifecycle:\n            postStart:\n              exec:\n                command: [\"/bin/sh\", \"-c\", \"(ip rule del table 51820; ip -6 rule del table 51820) || true\"]\n          # ...\n</code></pre> <p>Credits to @kvangent</p> <p>See the original issue #2521 comment which resolved this</p>"},{"location":"Setup/Advanced/multiple-gluetun/","title":"Multiple Gluetun","text":"<p>You can easily run multiple Gluetun containers on the same host machine without any conflict.</p> <p>On the other hand, there are few tricks to lower resource usage.</p>"},{"location":"Setup/Advanced/multiple-gluetun/#common-dns-server","title":"Common DNS server","text":"<p>You can run a shared DNS server for all your Gluetun instances. You can have a DNS server such as <code>qmcgaw/dns:v2.0.0-beta</code> and run it in the same Docker network as your other Gluetun containers. You can have it non-VPN'ed or VPN'ed through one of the Gluetun containers.</p>"},{"location":"Setup/Advanced/openvpn-client-certificate/","title":"OpenVPN client certificate","text":"<p>\ud83d\uded1 These instructions are only for specific VPN providers, such as Cyberghost or VPN secure. You should not read this if it not mentioned.</p> <p>Your client certificate is usually of the form:</p> <pre><code>-----BEGIN CERTIFICATE-----\n...\n...\n-----END CERTIFICATE-----\n</code></pre> <p>It may be given to you as a separate file or inlined in your Openvpn configuration file by your VPN service provider.</p> <p>\ud83d\udc81 For VPN secure, it's usually in the file <code>yourusername.crt</code>.</p> <p>First, you need to take your certificate (from its start line <code>-----BEGIN CERTIFICATE-----</code> to <code>-----END CERTIFICATE-----</code>) and place it in a file on your host <code>/yourpath/gluetun/client.crt</code>. Note <code>client.crt</code> must be this exact name.</p> <p>Then bind mount this gluetun directory in the container by running it with <code>-v /yourpath/gluetun:/gluetun</code>.</p> <p>Alternatively, you can also place the base64 part in the environment variable <code>OPENVPN_CERT</code>, as a single line (so remove the new line characters).</p>"},{"location":"Setup/Advanced/openvpn-client-encrypted-key/","title":"OpenVPN client encrypted key","text":"<p>\ud83d\uded1 These instructions are only for specific VPN providers, such as VPN secure. You should not read this if it not mentioned.</p> <p>Your encrypted key is of the form:</p> <pre><code>-----BEGIN ENCRYPTED PRIVATE KEY-----\n...\n...\n-----END ENCRYPTED PRIVATE KEY-----\n</code></pre> <p>It may be given to you as a separate file or inlined in your Openvpn configuration file by your VPN service provider. \ud83d\udc81 For VPN secure, it's usually in the file <code>yourusername.key</code>.</p> <p>\u26a0\ufe0f Because VPN secure uses DES to encrypt the key file, it is not supported by the latest OpenVPN 2.5 and above clients. To workaround this, the key is decrypted and re-encrypted using a higher encryption standard by Gluetun, before being plugged in to the OpenVPN client.</p> <p>First, you need to take your encrypted key (from its start line <code>-----BEGIN ENCRYPTED PRIVATE KEY-----</code> to <code>-----END ENCRYPTED PRIVATE KEY-----</code>) and place it in a file on your host <code>/yourpath/gluetun/openvpn_encrypted_key</code> (without file extension). Note <code>openvpn_encrypted_key</code> must be this exact name.</p> <p>Then bind mount this gluetun directory in the container by running it with <code>-v /yourpath/gluetun:/gluetun</code>.</p> <p>To decrypt this encrypted key, you would have to set the key passphrase, which you can set as an environment variable <code>OPENVPN_KEY_PASSPHRASE</code> or as a file/secret file.</p>"},{"location":"Setup/Advanced/openvpn-client-key/","title":"OpenVPN client key","text":"<p>\ud83d\uded1 These instructions are only for specific VPN providers, such as Cyberghost and VPN Unlimited. You should not read this if it not mentioned.</p> <p>Your client key is usually of the form:</p> <pre><code>-----BEGIN PRIVATE KEY-----\n...\n...\n-----END PRIVATE KEY-----\n</code></pre> <p>It may be given to you as a separate file or inlined in your Openvpn configuration file by your VPN service provider.</p> <p>First, you need to take your key (from its start line <code>-----BEGIN PRIVATE KEY-----</code> to <code>-----END PRIVATE KEY-----</code>) and place it in a file on your host <code>/yourpath/gluetun/client.key</code>. Note <code>client.key</code> must be this exact name.</p> <p>Then bind mount this gluetun directory in the container by running it with <code>-v /yourpath/gluetun:/gluetun</code>.</p> <p>Alternatively, you can also place the base64 part in the environment variable <code>OPENVPN_KEY</code>, as a single line (so remove the new line characters).</p>"},{"location":"Setup/Advanced/vpn-port-forwarding/","title":"VPN server port forwarding","text":"<p>\ud83d\udc81 Each VPN service provider supporting port forwarding have their own section on their own page on how to set it up.</p> <p>\ud83d\udd34 This is NOT about Docker port mapping</p>"},{"location":"Setup/Advanced/vpn-port-forwarding/#native-integrations","title":"Native integrations","text":"<p>VPN server side port forwarding is implemented natively into Gluetun for the following providers:</p> <ul> <li>Private Internet Access, more information</li> <li>ProtonVPN, more information</li> </ul> <p>You can enable it with <code>VPN_PORT_FORWARDING=on</code>. The forwarded port can be accessed:</p> <ul> <li>through the control server</li> <li>through the file written at <code>/tmp/gluetun/forwarded_port</code> (will be deprecated in v4.0.0 release)</li> <li>by running a user specified command upon port forwarding starting (see below)</li> </ul>"},{"location":"Setup/Advanced/vpn-port-forwarding/#custom-port-forwarding-updown-command","title":"Custom port forwarding up/down command","text":"<p>A command can be set with:</p> <ul> <li><code>VPN_PORT_FORWARDING_UP_COMMAND</code> to run when port forwarding has finished setting up</li> <li><code>VPN_PORT_FORWARDING_DOWN_COMMAND</code> to run when port forwarding has finished tearing down</li> </ul> <p>For example <code>VPN_PORT_FORWARDING_UP_COMMAND=/bin/sh -c \"echo {{PORTS}}\"</code>.</p> <p>Notes:</p> <ul> <li>The special string <code>{{PORTS}}</code> is replaced by a comma separated list of the ports that have been forwarded. For example <code>/bin/sh -c \"echo {{PORTS}}\"</code> would become <code>/bin/sh -c \"echo 5678,9876\"</code></li> <li>shell specific syntax such as <code>&amp;&amp;</code> is not understood in the command, and one should use <code>/bin/sh -c \"my shell syntax\"</code> to do so if they want.</li> <li>one can bind mount a shell script in Gluetun and execute it with for example <code>VPN_PORT_FORWARDING_UP_COMMAND=/bin/sh -c /gluetun/myscript.sh</code> - \ud83d\udc81  feel free to propose a pull request to add commonly used shell scripts for port forwarding!</li> <li>the output of the command is written to the port forwarding logger within Gluetun</li> </ul>"},{"location":"Setup/Advanced/vpn-port-forwarding/#qbittorrent-example","title":"qBittorrent example","text":"<p><code>VPN_PORT_FORWARDING_UP_COMMAND=/bin/sh -c 'wget -O- --retry-connrefused --post-data \"json={\\\"listen_port\\\":{{PORTS}}}\" http://127.0.0.1:8080/api/v2/app/setPreferences 2&gt;&amp;1'</code></p> <p>For this to work, the qBittorrent web UI server must be enabled and listening on port <code>8080</code> and the Web UI \"Bypass authentication for clients on localhost\" must be ticked (json key <code>bypass_local_auth</code>) so Gluetun can reach qBittorrent without authentication.</p> <p>Thanks to @Marsu31</p>"},{"location":"Setup/Advanced/vpn-port-forwarding/#allow-a-forwarded-port-through-the-firewall","title":"Allow a forwarded port through the firewall","text":"<p>For non-native integrations where you have a designated forwarded port from your VPN provider, you can allow it by adding it to the environment variable <code>FIREWALL_VPN_INPUT_PORTS</code>.</p>"},{"location":"Setup/Advanced/vpn-port-forwarding/#test-it","title":"Test it","text":"<p>Assuming:</p> <ul> <li>your gluetun container name is <code>gluetun</code></li> <li>your VPN public IP address is <code>99.99.99.99</code></li> <li>your VPN port forwarded is <code>4567</code></li> </ul> <p>You can test it with:</p> <pre><code>docker exec -it gluetun /bin/sh\n# Change amd64 to your CPU architecture\nwget -qO port-checker https://github.com/qdm12/port-checker/releases/download/v0.4.0/port-checker_0.4.0_linux_amd64\nchmod +x port-checker\n./port-checker --listening-address=\":4567\"\n</code></pre> <p>Then in your browser, access http://99.99.99.99:4567.</p> <p>It should show you your browser IP address and user agent. You should also see the request logged in the port-checker output.</p> <p>Finally, back to the terminal, press <code>CTRL+C</code> to stop port-checker and enter <code>exit</code> to quit the interactive shell in <code>gluetun</code>.</p>"},{"location":"Setup/Advanced/wireguard/","title":"Wireguard","text":""},{"location":"Setup/Advanced/wireguard/#kernelspace","title":"Kernelspace","text":"<p>If you don't have Wireguard in your kernel (\ud83d\udc40 Synology users), you can install them following @macdis' comment which might bring significant bandwidth gains.</p>"},{"location":"Setup/Advanced/wireguard/#load-wireguard-kernel-module","title":"Load Wireguard Kernel module","text":"<p>Some systems do not load automatically the Wireguard module at start.</p> <p>The more appropriate way is to configure your system to run <code>modprobe wireguard</code> at boot before launching Docker.</p> <p>Alternatively, <code>modprobe</code> is natively implemented in Gluetun. This one is used to try loading the Wireguard kernel module if it is not found. To do so however, you need to:</p> <ul> <li>add the <code>SYS_MODULE</code> container capability</li> <li>bind mount (read only) the volume <code>/lib/modules:/lib/modules:ro</code></li> </ul> <p>For example in a docker-compose.yml file:</p> <pre><code>cap_add:\n  - SYS_MODULE\nvolumes:\n  - /lib/modules:/lib/modules:ro\n</code></pre>"},{"location":"Setup/Options/control-server/","title":"Control server options","text":""},{"location":"Setup/Options/control-server/#environment-variables","title":"Environment variables","text":"<p>\ud83d\udc81 The following environment variables are all optional.</p> <p>This is to configure the HTTP Control server.</p> Variable Default Choices Description <code>HTTP_CONTROL_SERVER_ADDRESS</code> <code>:8000</code> Valid listening address Listening address for the HTTP control server <code>HTTP_CONTROL_SERVER_LOG</code> <code>on</code> <code>on</code> or <code>off</code> Enable logging of HTTP requests <code>HTTP_CONTROL_SERVER_AUTH_CONFIG_FILEPATH</code> Valid path Path to a TOML file containing authentication configuration"},{"location":"Setup/Options/dns/","title":"DNS options","text":""},{"location":"Setup/Options/dns/#environment-variables","title":"Environment variables","text":"<p>\ud83d\udc81 The following environment variables are all optional.</p> Variable Default Choices Description <code>DOT</code> <code>on</code> <code>on</code>, <code>off</code> Activate DNS over TLS with Unbound <code>DOT_PROVIDERS</code> <code>cloudflare</code> <code>cloudflare</code>, <code>google</code>, <code>quad9</code>, <code>quadrant</code>, <code>cleanbrowsing</code> Comma delimited list of DNS over TLS providers <code>DOT_CACHING</code> <code>on</code> <code>on</code>, <code>off</code> Unbound caching <code>DOT_IPV6</code> <code>off</code> <code>on</code>, <code>off</code> DNS IPv6 resolution <code>DOT_PRIVATE_ADDRESS</code> All private CIDRs ranges Comma separated list of CIDRs or single IP addresses Unbound won't resolve to. Note that the default setting prevents DNS rebinding <code>DNS_UPDATE_PERIOD</code> <code>24h</code> i.e. <code>0</code>, <code>30s</code>, <code>5m</code>, <code>24h</code> Period to update block lists and cryptographic files and restart Unbound. Set to <code>0</code> to deactivate updates <code>BLOCK_MALICIOUS</code> <code>on</code> <code>on</code>, <code>off</code> Block malicious hostnames and IPs with Unbound <code>BLOCK_SURVEILLANCE</code> <code>off</code> <code>on</code>, <code>off</code> Block surveillance hostnames and IPs with Unbound <code>BLOCK_ADS</code> <code>off</code> <code>on</code>, <code>off</code> Block ads hostnames and IPs with Unbound <code>UNBLOCK</code> i.e. <code>domain1.com,x.domain2.co.uk</code> Comma separated list of domain names to leave unblocked with Unbound <code>DNS_ADDRESS</code> <code>127.0.0.1</code> Any IP address IP address to use as DNS resolver. It defaults to localhost to use the DNS over TLS Unbound server. <code>DNS_KEEP_NAMESERVER</code> <code>off</code> <code>on</code> or <code>off</code> Keep <code>/etc/resolv.conf</code> untouched. \u26a0\ufe0f this will likely leak DNS traffic outside the VPN through your default container DNS. This imples <code>DOT=off</code> and ignores <code>DNS_ADDRESS</code>"},{"location":"Setup/Options/firewall/","title":"Firewall options","text":""},{"location":"Setup/Options/firewall/#environment-variables","title":"Environment variables","text":"<p>\ud83d\udc81 The following environment variables are all optional.</p> Variable Default Choices Description <code>FIREWALL_VPN_INPUT_PORTS</code> i.e. <code>1000,8080</code> Comma separated list of ports to allow from the VPN server side <code>FIREWALL_INPUT_PORTS</code> i.e. <code>1000,8000</code> Comma separated list of ports to allow through the default interface. This seems needed for Kubernetes sidecars. <code>FIREWALL_DEBUG</code> <code>off</code> <code>on</code> or <code>off</code> Prints every firewall related command. You should use it for debugging purposes only. <code>FIREWALL_OUTBOUND_SUBNETS</code> i.e. <code>192.168.1.0/24,192.168.10.121,10.0.0.5/28</code> Comma separated subnets that Gluetun and the containers sharing its network stack are allowed to access. This involves firewall and routing modifications."},{"location":"Setup/Options/firewall/#custom-iptables-rules","title":"Custom iptables rules","text":"<p>If you need to specify additional iptables rules to be run after the built-in iptables rules, you can use the file at <code>/iptables/post-rules.txt</code> with one iptables command per line and these will automatically be run on container start. For example the <code>/iptables/post-rules.txt</code> file could contain:</p> <pre><code>iptables -A INPUT -i eth0 -s 0.0.0.0/0 -d 192.168.2.0/24 -p udp --sport 1197 -j ACCEPT\niptables -A INPUT -i eth0 -s 0.0.0.0/0 -d 192.168.2.0/24 -p tcp --sport 1197 -j ACCEPT\n</code></pre>"},{"location":"Setup/Options/healthcheck/","title":"Healthcheck options","text":""},{"location":"Setup/Options/healthcheck/#environment-variables","title":"Environment variables","text":"<p>\ud83d\udc81 The following environment variables are all optional.</p> Variable Default Description <code>HEALTH_TARGET_ADDRESS</code> <code>cloudflare.com:443</code> Address to ping on every internal health check <code>HEALTH_VPN_DURATION_INITIAL</code> <code>6s</code> Initial duration to wait for the VPN to be ready before restarting it <code>HEALTH_VPN_DURATION_ADDITION</code> <code>5s</code> Additional duration to add to the wait time for each consecutive failure of the VPN <code>HEALTH_SUCCESS_WAIT_DURATION</code> <code>5s</code> Duration to wait after a success check to perform another check <code>HEALTH_SERVER_ADDRESS</code> <code>127.0.0.1:9999</code> Internal health check server listening address"},{"location":"Setup/Options/http-proxy/","title":"HTTP proxy options","text":""},{"location":"Setup/Options/http-proxy/#environment-variables","title":"Environment variables","text":"<p>\ud83d\udc81 The following environment variables are all optional.</p> Variable Default Choices Description <code>HTTPPROXY</code> <code>off</code> <code>on</code>, <code>off</code> Enable the internal HTTP proxy <code>HTTPPROXY_LOG</code> <code>off</code> <code>on</code> or <code>off</code> Logs every tunnel requests <code>HTTPPROXY_LISTENING_ADDRESS</code> <code>:8888</code> A listening address Internal listening address for the HTTP proxy <code>HTTPPROXY_USER</code> Username to use to connect to the HTTP proxy <code>HTTPPROXY_PASSWORD</code> Password to use to connect to the HTTP proxy <code>HTTPPROXY_STEALTH</code> <code>off</code> <code>on</code> or <code>off</code> Stealth mode means HTTP proxy headers are not added to your requests"},{"location":"Setup/Options/openvpn/","title":"OpenVPN options","text":""},{"location":"Setup/Options/openvpn/#environment-variables","title":"Environment variables","text":"<p>If using OpenVPN, the following two are usually compulsory:</p> Variable Default Choices Description <code>OPENVPN_USER</code> OpenVPN username <code>OPENVPN_PASSWORD</code> OpenVPN password <p>\ud83d\udc81 The following environment variables are all optional.</p> Variable Default Choices Description <code>OPENVPN_PROTOCOL</code> <code>udp</code> <code>udp</code> or <code>tcp</code> Network protocol to use, only valid for OpenVPN <code>OPENVPN_VERSION</code> <code>2.6</code> <code>2.5</code> or <code>2.6</code> Set the OpenVPN version to run <code>OPENVPN_ENDPOINT_IP</code> Valid IP address Specify a generally optional target VPN server IP address to use <code>OPENVPN_ENDPOINT_PORT</code> Valid port number Specify a generally optional target VPN server port number to use <code>OPENVPN_VERBOSITY</code> <code>1</code> <code>0</code> to <code>6</code> Openvpn verbosity level <code>OPENVPN_FLAGS</code> Openvpn flags Space delimited openvpn flags to pass to <code>openvpn</code> <code>OPENVPN_ROOT</code> <code>no</code> <code>yes</code> or <code>no</code> Run OpenVPN as root <code>OPENVPN_CIPHERS</code> i.e. <code>aes-256-gcm</code> Specify a custom cipher to use. It will also set <code>ncp-disable</code> if using AES GCM for PIA <code>OPENVPN_AUTH</code> i.e. <code>sha256</code> Specify a custom auth algorithm to use <code>OPENVPN_MSSFIX</code> <code>0</code> <code>0</code> to <code>9999</code> Set the MSS fix parameter. Set to <code>0</code> to use the defaults. <code>OPENVPN_CERT</code> base64 PEM OpenVPN certificate content (base64 part only) <code>OPENVPN_KEY</code> base64 PEM OpenVPN key (base64 part only) <code>OPENVPN_ENCRYPTED_KEY</code> base64 PEM OpenVPN encrypted key (base64 part only) <code>OPENVPN_KEY_PASSPHRASE</code> Specify a key passphrase to decrypt an encrypted key <code>OPENVPN_PROCESS_USER</code> <code>root</code> Valid OS user Specify a user to run the OpenVPN subprocess <code>OPENVPN_CUSTOM_CONFIG</code> Empty or path to file Specify a custom OpenVPN configuration file to use for the custom VPN provider."},{"location":"Setup/Options/others/","title":"Other options","text":""},{"location":"Setup/Options/others/#environment-variables","title":"Environment variables","text":"<p>\ud83d\udc81 The following environment variables are all optional.</p> Variable Default Choices Description <code>TZ</code> i.e. <code>Europe/London</code> Specify a timezone to use to have correct log times <code>PUID</code> <code>1000</code> User ID to run as non root and for ownership of files written <code>PGID</code> <code>1000</code> Group ID to run as non root and for ownership of files written <code>PUBLICIP_ENABLED</code> <code>true</code> <code>true</code>, <code>false</code> Check for public IP address information on VPN connection <code>PUBLICIP_API</code> <code>ipinfo</code> <code>ipinfo</code>, <code>ip2location</code>, <code>cloudflare</code> or custom URL Public IP echo service API to use or an echoip URL in the form <code>echoip#https://xyz</code> <code>PUBLICIP_API_TOKEN</code> Optional API token for the public IP echo service to increase rate limiting <code>PUBLICIP_FILE</code> <code>/tmp/gluetun/ip</code> Any filepath Filepath to store the public IP address assigned. This will be removed in the <code>v4</code> program, instead you might want to use the control server <code>VERSION_INFORMATION</code> <code>on</code> <code>on</code>, <code>off</code> Logs a message indicating if a newer version is available once the VPN is connected"},{"location":"Setup/Options/port-forwarding/","title":"VPN server port forwarding options","text":""},{"location":"Setup/Options/port-forwarding/#environment-variables","title":"Environment variables","text":"<p>\ud83d\udc81 The following environment variables are all optional.</p> Variable Default Choices Description <code>VPN_PORT_FORWARDING</code> <code>off</code> <code>off</code> or <code>on</code> Enable custom port forwarding code for supported providers <code>VPN_PORT_FORWARDING_PROVIDER</code> Current provider in use <code>private internet access</code> Choose the custom port forwarding code to use. This is useful when using the custom provider with Wireguard. For PIA, make sure you set <code>SERVER_NAMES=&lt;server-name&gt;</code>. <code>VPN_PORT_FORWARDING_STATUS_FILE</code> <code>/tmp/gluetun/forwarded_port</code> Valid filepath File path to use for writing the forwarded port obtained. <code>VPN_PORT_FORWARDING_LISTENING_PORT</code> Valid port number Port redirection for the VPN server side port forwarded."},{"location":"Setup/Options/shadowsocks/","title":"Shadowsocks options","text":""},{"location":"Setup/Options/shadowsocks/#environment-variables","title":"Environment variables","text":"<p>\ud83d\udc81 The following environment variables are all optional.</p> Variable Default Choices Description <code>SHADOWSOCKS</code> <code>off</code> <code>on</code>, <code>off</code> Enable the internal Shadowsocks proxy <code>SHADOWSOCKS_LOG</code> <code>off</code> <code>on</code>, <code>off</code> Enable logging <code>SHADOWSOCKS_LISTENING_ADDRESS</code> <code>:8388</code> Listening address Internal listening address for Shadowsocks <code>SHADOWSOCKS_PASSWORD</code> Password to use to connect to Shadowsocks <code>SHADOWSOCKS_CIPHER</code> <code>chacha20-ietf-poly1305</code> <code>chacha20-ietf-poly1305</code>, <code>aes-128-gcm</code>, <code>aes-256-gcm</code> AEAD Cipher to use for Shadowsocks"},{"location":"Setup/Options/storage/","title":"Storage options","text":""},{"location":"Setup/Options/storage/#environment-variables","title":"Environment variables","text":"<p>\ud83d\udc81 The following environment variables are all optional.</p> Variable Default Choices Description <code>STORAGE_FILEPATH</code> <code>/gluetun/servers.json</code> Empty string (\"\") or valid file path Path of servers.json file, or empty to disable caching servers"},{"location":"Setup/Options/updater/","title":"Servers updater options","text":""},{"location":"Setup/Options/updater/#environment-variables","title":"Environment variables","text":"<p>\ud83d\udc81 The following environment variables are all optional.</p> Variable Default Choices Description <code>UPDATER_PERIOD</code> <code>0</code> Valid duration string such as <code>24h</code> Period to update the VPN servers data in memory and to /gluetun/servers.json. Set to <code>0</code> to disable. This does a burst of DNS over TLS requests, which may be blocked if you set <code>BLOCK_MALICIOUS=on</code> for example. <code>UPDATER_MIN_RATIO</code> <code>0.8</code> Ratio between <code>0</code> (excluded) and <code>1</code> Ratio of servers to be found for the update to succeed, compared to the servers already built in the program <code>UPDATER_VPN_SERVICE_PROVIDERS</code> the current VPN provider used Any valid VPN provider name List of providers to update servers data for, when the updater triggers periodically. If left empty, it defaults to the current VPN provider used at start."},{"location":"Setup/Options/vpn/","title":"VPN options","text":""},{"location":"Setup/Options/vpn/#environment-variables","title":"Environment variables","text":"<p>\ud83d\udc81 The following environment variables are all optional.</p> Variable Default Choices Description <code>VPN_SERVICE_PROVIDER</code> <code>private internet access</code> Valid VPN provider Specify a supported VPN provider to use <code>VPN_TYPE</code> <code>openvpn</code> <code>openvpn</code> or <code>wireguard</code> VPN protocol to use. Not all providers support Wireguard. <code>VPN_INTERFACE</code> <code>tun0</code> Any interface name Specify a custom network interface name to use"},{"location":"Setup/Options/wireguard/","title":"Wireguard options","text":""},{"location":"Setup/Options/wireguard/#files","title":"Files","text":"<p>You can bind mount an ini Wireguard configuration file to <code>/gluetun/wireguard/wg0.conf</code>. Any field present will be extracted from it and used. Note any field value set in this file takes precedence over the environment variables.</p>"},{"location":"Setup/Options/wireguard/#environment-variables","title":"Environment variables","text":"<p>If using the Wireguard protocol, depending on the provider, the following might be compulsory:</p> Variable Default Choices Description <code>WIREGUARD_PRIVATE_KEY</code> Valid base 58 Wireguard key Wireguard client private key to use. This is usually always needed. <code>WIREGUARD_ADDRESSES</code> Valid IP network interface address in the format <code>xx.xx.xx.xx/xx</code> This is usually needed. <code>WIREGUARD_PUBLIC_KEY</code> Valid base 58 Wireguard key Wireguard server public key to use. This may or may not be needed. <code>WIREGUARD_ENDPOINT_IP</code> Valid IP address Specify a generally optional target VPN server IP address to use <code>WIREGUARD_ENDPOINT_PORT</code> Valid port number Specify a generally optional target VPN server port number to use <p>\ud83d\udc81 The following environment variables are all optional:</p> Variable Default Choices Description <code>WIREGUARD_PRESHARED_KEY</code> Base64 pre-shared key Wireguard pre-shared key <code>WIREGUARD_ALLOWED_IPS</code> <code>0.0.0.0/0,::/0</code> CSV of IP address ranges Wireguard peer allowed ips <code>WIREGUARD_IMPLEMENTATION</code> <code>auto</code> <code>auto</code>, <code>kernelspace</code> or <code>userspace</code> Wireguard implementation to use <code>WIREGUARD_MTU</code> <code>1400</code> Any positive value up to <code>65535</code> Wireguard MTU <code>WIREGUARD_PERSISTENT_KEEPALIVE_INTERVAL</code> Any duration, for example <code>25s</code> Wireguard persistent keepalive interval"},{"location":"Setup/Prerequisites/32bit/","title":"32 bit OS prerequisites","text":"<p>On some 32 bit operating systems, you might encounter an OpenVPN error similar to:</p> <pre><code>VERIFY ERROR: depth=0, error=format error in CRL's lastUpdate field: ...\nOpenSSL: error:1416F086:SSL routines:tls_process_server_certificate:certificate verify failed\nTLS_ERROR: BIO read tls_read_plaintext error\n</code></pre> <p>This is because since gluetun <code>v3.16.0</code>, the base Docker image system was upgraded from Alpine 3.12 to 3.13, which has a different time representation. It struggles because of <code>lastUpdate field</code> which is a time field. The change only affects 32 bit systems running a kernel without this new time representation support.</p>"},{"location":"Setup/Prerequisites/32bit/#raspberry-pis","title":"Raspberry Pis","text":"<p>For Raspberry Pis running 32 bit operating systems (such as Raspbian), you can either:</p> <ul> <li> <p>(Untested) Upgrade containerd.io to version <code>1.4.3-2</code> or above:</p> <pre><code>sudo apt-get update -y\nsudo apt-get install -y containerd.io\nsudo apt list containerd.io\n# should show 1.4.3-2 or above\n</code></pre> </li> <li> <p>Upgrade <code>libseccomp2</code> to <code>2.4.2</code> or above and ensure your Docker version is <code>19.03.9</code> or above:</p> <pre><code>sudo apt list libseccomp2\n# this should show a version below 2.4.2\ndocker version --format {{.Server.Version}}\n# should show 19.03.9 or above, otherwise upgrade your Docker\nwget -qO /tmp/libseccomp2.deb https://ftp.debian.org/debian/pool/main/libs/libseccomp/libseccomp2_2.5.1-1_armhf.deb\nsudo dpkg -i /tmp/libseccomp2.deb\nrm /tmp/libseccomp2.deb\nsudo apt list libseccomp2\n# should show 2.5.1-1\n</code></pre> </li> </ul> <p>You can now restart gluetun and it should be working.</p>"},{"location":"Setup/Prerequisites/32bit/#debian-x86","title":"Debian x86","text":"<p>For x86 Debian operating systems, you can either:</p> <ul> <li> <p>(Untested) Upgrade containerd.io to version <code>1.4.3-2</code> or above:</p> <pre><code>sudo apt-get update -y\nsudo apt-get install -y containerd.io\nsudo apt list containerd.io\n# should show 1.4.3-2 or above\n</code></pre> </li> <li> <p>Upgrade <code>libseccomp2</code> to <code>2.4.2</code> or above and ensure your Docker version is <code>19.03.9</code> or above:</p> <pre><code>sudo apt list libseccomp2\n# this should show a version below 2.4.2\ndocker version --format {{.Server.Version}}\n# should show 19.03.9 or above, otherwise upgrade your Docker\n</code></pre> <p>Let's first try using the Debian package manager directly:</p> <pre><code>sudo apt-get update -y\nsudo apt-get install libseccomp2\nsudo apt list libseccomp2\n# should show a version superior to 2.4.2\n</code></pre> <p>If the last command shows a version inferior to <code>2.4.2</code>, then do the following:</p> <pre><code>wget -qO /tmp/libseccomp2.deb https://ftp.debian.org/debian/pool/main/libs/libseccomp/libseccomp-dev_2.5.1-1_i386.deb\nsudo dpkg -i /tmp/libseccomp2.deb\nrm /tmp/libseccomp2.deb\nsudo apt list libseccomp2\n# should show 2.5.1-1\n</code></pre> </li> </ul> <p>You can now restart gluetun and it should be working.</p>"},{"location":"Setup/Prerequisites/32bit/#other-32-bit-oses","title":"Other 32 bit OSes","text":"<p>Try to follow the recommendations from the Alpine page.</p> <p>Feel free to open a Github issue with your positive/negative experience so I can later update this Wiki page.</p>"},{"location":"Setup/Prerequisites/synology/","title":"Synology prerequisites","text":"<p>On some Synology devices, you must install the <code>tun</code> kernel module on your host at every boot. To do so, open a terminal and enter:</p> <pre><code>sudo insmod /lib/modules/tun.ko\n</code></pre> <p>This will also install the <code>tun</code> device after a reboot (see #1296)</p>"},{"location":"Setup/Providers/airvpn/","title":"AirVPN","text":""},{"location":"Setup/Providers/airvpn/#tldr","title":"TLDR","text":""},{"location":"Setup/Providers/airvpn/#wireguard","title":"Wireguard","text":"<pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n  -e VPN_SERVICE_PROVIDER=airvpn \\\n  -e VPN_TYPE=wireguard \\\n  -e WIREGUARD_PRIVATE_KEY=yCbHtKAgJASnJs2S/aZsjag9Fy04csmR4qDUDkJgX2c= \\\n  -e WIREGUARD_PRESHARED_KEY=yCbHtKAgJASnJs2S/aZsjag9Fy04csmR4qDUDkJgX2c= \\\n  -e WIREGUARD_ADDRESSES=10.99.99.99/32,ff:ff:ff...:ff/128 \\\n  qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=airvpn\n      - VPN_TYPE=wireguard\n      - WIREGUARD_PRIVATE_KEY=yCbHtKAgJASnJs2S/aZsjag9Fy04csmR4qDUDkJgX2c=\n      - WIREGUARD_PRESHARED_KEY=yCbHtKAgJASnJs2S/aZsjag9Fy04csmR4qDUDkJgX2c=\n      - WIREGUARD_ADDRESSES=10.99.99.99/32,ff:ff:ff...:ff/128\n      - SERVER_COUNTRIES=Netherlands\n</code></pre> <p>Warning</p> <p>\ufe0f <code>WIREGUARD_ADDRESSES</code> may only contain an IPv6 address (such as   <code>ff:ff.../128</code>) if your container setup supports IPv6. To do so, see the   IPv6   document.   Otherwise, remove the IPv6 address from <code>WIREGUARD_ADDRESSES</code>.</p>"},{"location":"Setup/Providers/airvpn/#openvpn","title":"OpenVPN","text":"<ol> <li>Setup your client key</li> <li>Setup your client certificate</li> </ol> <pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n  -e VPN_SERVICE_PROVIDER=airvpn \\\n  -v /yourpath:/gluetun \\\n  -e SERVER_COUNTRIES=Netherlands \\\n  qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=airvpn\n      - SERVER_COUNTRIES=Netherlands\n    volumes:\n      - ./gluetun:/gluetun\n</code></pre>"},{"location":"Setup/Providers/airvpn/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=airvpn</code></li> <li>For Wireguard:</li> <li><code>VPN_TYPE=wireguard</code></li> <li><code>WIREGUARD_PRIVATE_KEY</code></li> <li><code>WIREGUARD_PRESHARED_KEY</code></li> <li><code>WIREGUARD_ADDRESSES</code></li> </ul> <p>You can get each of these Wireguard values you need from the Config Generator in the AirVPN Client Area.</p>"},{"location":"Setup/Providers/airvpn/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_COUNTRIES</code>: Comma separated list of countries</li> <li><code>SERVER_REGIONS</code>: Comma separated list of regions</li> <li><code>SERVER_CITIES</code>: Comma separated list of cities</li> <li><code>SERVER_NAMES</code>: Comma separated list of server names</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> </ul>"},{"location":"Setup/Providers/airvpn/#servers","title":"Servers","text":"<p>The list of servers for AirVPN is available in the source code.</p> <p>The table of servers cannot be put here unfortunately as there are too many servers and the Github markdown engine then fails.</p>"},{"location":"Setup/Providers/airvpn/#vpn-port-forwarding","title":"VPN port forwarding","text":"<p>If you want to use VPN server side port forwarding:</p> <ol> <li>Log in your AirVPN account at airvpn.org/client</li> <li>Obtain a port from airvpn.org/ports</li> <li>Add the port to the environment variable <code>FIREWALL_VPN_INPUT_PORTS</code></li> </ol>"},{"location":"Setup/Providers/custom/","title":"Custom provider","text":""},{"location":"Setup/Providers/custom/#tldr","title":"TLDR","text":""},{"location":"Setup/Providers/custom/#openvpn","title":"OpenVPN","text":"<p>Info</p> <p>See the Openvpn configuration file page for information on how to set this up.</p> <pre><code>docker run -it --rm --cap-add=NET_ADMIN \\\n-e VPN_SERVICE_PROVIDER=custom -e VPN_TYPE=openvpn \\\n-v /yourpath/yourconfig.conf:/gluetun/config.conf:ro \\\n-e OPENVPN_CUSTOM_CONFIG=/gluetun/custom.conf \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    volumes:\n      - ./yourovpnconfig.conf:/gluetun/custom.conf:ro\n    environment:\n      - VPN_SERVICE_PROVIDER=custom\n      - VPN_TYPE=openvpn\n      - OPENVPN_CUSTOM_CONFIG=/gluetun/custom.conf\n</code></pre>"},{"location":"Setup/Providers/custom/#wireguard","title":"Wireguard","text":"<pre><code>docker run -it --rm --cap-add=NET_ADMIN \\\n-e VPN_SERVICE_PROVIDER=custom -e VPN_TYPE=wireguard \\\n-e WIREGUARD_ENDPOINT_IP=1.2.3.4 \\\n-e WIREGUARD_ENDPOINT_PORT=51820 \\\n-e WIREGUARD_PUBLIC_KEY=wAUaJMhAq3NFutLHIdF8AN0B5WG8RndfQKLPTEDHal0= \\\n-e WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU= \\\n-e WIREGUARD_PRESHARED_KEY=xOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU= \\\n-e WIREGUARD_ADDRESSES=\"10.64.222.21/32\" \\\nqmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=custom\n      - VPN_TYPE=wireguard\n      - WIREGUARD_ENDPOINT_IP=1.2.3.4\n      - WIREGUARD_ENDPOINT_PORT=51820\n      - WIREGUARD_PUBLIC_KEY=wAUaJMhAq3NFutLHIdF8AN0B5WG8RndfQKLPTEDHal0=\n      - WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=\n      - WIREGUARD_PRESHARED_KEY=xOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=\n      - WIREGUARD_ADDRESSES=10.64.222.21/32\n</code></pre> <p>Info</p> <p>\ud83d\udc81 You can also bind mount a wireguard configuration file (ini format) to <code>/gluetun/wireguard/wg0.conf</code>.</p>"},{"location":"Setup/Providers/custom/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=custom</code></li> </ul>"},{"location":"Setup/Providers/custom/#openvpn-only","title":"OpenVPN only","text":"<ul> <li><code>OPENVPN_CUSTOM_CONFIG</code>: Path to your custom configuration file.</li> </ul>"},{"location":"Setup/Providers/custom/#wireguard-only","title":"Wireguard only","text":"<ul> <li><code>WIREGUARD_ENDPOINT_IP</code>: the server endpoint IP address</li> <li><code>WIREGUARD_ENDPOINT_PORT</code>: the server endpoint port</li> <li><code>WIREGUARD_PUBLIC_KEY</code> is the server 32 bytes public key in base64 format.</li> <li><code>WIREGUARD_PRIVATE_KEY</code> is your 32 bytes private key in base64 format.</li> <li><code>WIREGUARD_ADDRESSES</code> is your IP network interface address in the format <code>xx.xx.xx.xx/xx</code>.</li> <li><code>WIREGUARD_PRESHARED_KEY</code> is your 32 bytes pre-shared key in base64 format. This is often optional and can be left unset.</li> </ul>"},{"location":"Setup/Providers/cyberghost/","title":"Cyberghost","text":""},{"location":"Setup/Providers/cyberghost/#tldr","title":"TLDR","text":"<ol> <li>Setup your client key</li> <li>Setup your client certificate</li> </ol> <pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=cyberghost \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-v /yourpath:/gluetun \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=cyberghost\n      - OPENVPN_USER=abc\n      - OPENVPN_PASSWORD=abc\n      - SERVER_COUNTRIES=Netherlands\n    volumes:\n      - ./gluetun:/gluetun\n</code></pre> <p>\ud83d\udc81 To use with Wireguard, see the custom provider Wireguard section.</p>"},{"location":"Setup/Providers/cyberghost/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=cyberghost</code></li> <li><code>OPENVPN_USER</code></li> <li><code>OPENVPN_PASSWORD</code></li> </ul>"},{"location":"Setup/Providers/cyberghost/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_COUNTRIES</code>: Comma separated list of countries</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> </ul>"},{"location":"Setup/Providers/cyberghost/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/expressvpn/","title":"ExpressVPN","text":""},{"location":"Setup/Providers/expressvpn/#tldr","title":"TLDR","text":"<pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=expressvpn \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=expressvpn\n      - OPENVPN_USER=abc\n      - OPENVPN_PASSWORD=abc\n      - SERVER_COUNTRIES=Netherlands\n</code></pre>"},{"location":"Setup/Providers/expressvpn/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=expressvpn</code></li> <li><code>OPENVPN_USER</code></li> <li><code>OPENVPN_PASSWORD</code></li> </ul>"},{"location":"Setup/Providers/expressvpn/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_COUNTRIES</code>: Comma separated list of countries</li> <li><code>SERVER_CITIES</code> : Comma separated list of cities</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> </ul>"},{"location":"Setup/Providers/expressvpn/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/fastestvpn/","title":"FastestVPN","text":""},{"location":"Setup/Providers/fastestvpn/#tldr","title":"TLDR","text":"<pre><code># OpenVPN\ndocker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=fastestvpn \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code># Wireguard\ndocker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=fastestvpn \\\n-e VPN_TYPE=wireguard \\\n-e WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU= \\\n-e WIREGUARD_ADDRESSES=\"10.64.222.21/32\" \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=fastestvpn\n      - VPN_TYPE=wireguard\n      - WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=\n      - WIREGUARD_ADDRESSES=10.64.222.21/32\n      - SERVER_COUNTRIES=Netherlands\n</code></pre>"},{"location":"Setup/Providers/fastestvpn/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=fastestvpn</code></li> </ul>"},{"location":"Setup/Providers/fastestvpn/#openvpn-only","title":"OpenVPN only","text":"<ul> <li><code>OPENVPN_USER</code></li> <li><code>OPENVPN_PASSWORD</code></li> </ul>"},{"location":"Setup/Providers/fastestvpn/#wireguard-only","title":"Wireguard only","text":"<p>You can find both values below in the Wireguard configuration file provided by FastestVPN, which you can obtain by asking their support at support@fastestvpn.com.</p> <ul> <li><code>WIREGUARD_PRIVATE_KEY</code> is your 32 bytes key in base64 format. It corresponds to the <code>PrivateKey</code> field value in the Wireguard configuration file.</li> <li><code>WIREGUARD_ADDRESSES</code> is the IP prefix to assign to the Wireguard interface, corresponding to the <code>Address</code> field value in the Wireguard configuration file.</li> </ul>"},{"location":"Setup/Providers/fastestvpn/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_COUNTRIES</code>: Comma separated list of countries</li> <li><code>SERVER_CITIES</code>: Comma separated list of cities</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> </ul>"},{"location":"Setup/Providers/fastestvpn/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/hidemyass/","title":"HideMyAss","text":""},{"location":"Setup/Providers/hidemyass/#tldr","title":"TLDR","text":"<pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=hidemyass \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=hidemyass\n      - OPENVPN_USER=abc\n      - OPENVPN_PASSWORD=abc\n      - SERVER_COUNTRIES=Netherlands\n</code></pre>"},{"location":"Setup/Providers/hidemyass/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=hidemyass</code></li> <li><code>OPENVPN_USER</code></li> <li><code>OPENVPN_PASSWORD</code></li> </ul>"},{"location":"Setup/Providers/hidemyass/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_COUNTRIES</code>: Comma separated list of countries</li> <li><code>SERVER_REGIONS</code>: Comma separated list of regions</li> <li><code>SERVER_CITIES</code>: Comma separated list of cities</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> </ul>"},{"location":"Setup/Providers/hidemyass/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/ipvanish/","title":"IPVanish","text":""},{"location":"Setup/Providers/ipvanish/#tldr","title":"TLDR","text":"<pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=ipvanish \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=ipvanish\n      - OPENVPN_USER=abc\n      - OPENVPN_PASSWORD=abc\n      - SERVER_COUNTRIES=Netherlands\n</code></pre>"},{"location":"Setup/Providers/ipvanish/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=ipvanish</code></li> <li><code>OPENVPN_USER</code></li> <li><code>OPENVPN_PASSWORD</code></li> </ul>"},{"location":"Setup/Providers/ipvanish/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_COUNTRIES</code>: Comma separated list of countries</li> <li><code>SERVER_CITIES</code>: Comma separated list of countries</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> </ul>"},{"location":"Setup/Providers/ipvanish/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/ivpn/","title":"Ivpn","text":""},{"location":"Setup/Providers/ivpn/#tldr","title":"TLDR","text":"<pre><code># OpenVPN\ndocker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=ivpn \\\n-e VPN_TYPE=openvpn -e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_CITIES=amsterdam qmcgaw/gluetun\n</code></pre> <pre><code># Wireguard\ndocker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=ivpn \\\n-e VPN_TYPE=wireguard \\\n-e WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU= \\\n-e WIREGUARD_ADDRESSES=\"10.64.222.21/32\" \\\n-e SERVER_CITIES=amsterdam qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=ivpn\n      - VPN_TYPE=wireguard\n      - WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=\n      - WIREGUARD_ADDRESSES=10.64.222.21/32\n      - SERVER_CITIES=Amsterdam\n</code></pre>"},{"location":"Setup/Providers/ivpn/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=ivpn</code></li> </ul>"},{"location":"Setup/Providers/ivpn/#openvpn-only","title":"OpenVPN only","text":"<ul> <li><code>OPENVPN_USER</code> can be your email address or your account ID (<code>i-xxxx-xxxx-xxxx</code> or <code>ivpn-xxxx-xxxx-xxxx</code>)</li> <li><code>OPENVPN_PASSWORD</code> is needed if <code>OPENVPN_USER</code> is not your account ID.</li> </ul>"},{"location":"Setup/Providers/ivpn/#wireguard-only","title":"Wireguard only","text":"<ul> <li><code>WIREGUARD_PRIVATE_KEY</code> is your 32 bytes key in base64 format. Note this is specific by user and the same for all servers.</li> <li><code>WIREGUARD_ADDRESSES</code> is your IP network interface address in the format <code>xx.xx.xx.xx/xx</code>. Note this is specific by user and the same for all servers.</li> </ul>"},{"location":"Setup/Providers/ivpn/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_COUNTRIES</code>: Comma separated list of countries</li> <li><code>SERVER_CITIES</code>: Comma separated list of cities</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> <li><code>ISP</code>: Comma separated list of ISPs</li> <li><code>WIREGUARD_ENDPOINT_PORT</code>: Custom Wireguard server endpoint port to use, which can be one of: <code>2049</code>, <code>2050</code>, <code>53</code>, <code>30587</code>, <code>41893</code>, <code>48574</code>, <code>58237</code></li> </ul>"},{"location":"Setup/Providers/ivpn/#ipv6-tunneling-with-openvpn","title":"IPv6 tunneling with OpenVPN","text":"<p>IPv6 is automatically enabled in the routing, firewall, wireguard and openvpn setup if it's supported.</p> <p>If you want to tunnel IPv6:</p> <ol> <li> <p>Ensure your Kernel has IPv6</p> <p><pre><code>lsmod | grep ipv6\n</code></pre> Should show something.</p> </li> <li> <p>Enable IPv6 in Docker for this container:</p> <ul> <li>For a Docker run command, add the flag <code>--sysctl net.ipv6.conf.all.disable_ipv6=0</code> (or <code>--sysctl net.ipv6.conf.all.disable=0</code> on some systems)</li> <li>For docker-compose.yml files, add this to your <code>gluetun</code> config block:   <pre><code>sysctls:\n  - net.ipv6.conf.all.disable_ipv6=0\n</code></pre></li> </ul> </li> <li> <p>Start the container</p> </li> </ol>"},{"location":"Setup/Providers/ivpn/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/mullvad/","title":"Mullvad","text":""},{"location":"Setup/Providers/mullvad/#tldr","title":"TLDR","text":"<pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=mullvad \\\n-e VPN_TYPE=wireguard \\\n-e WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU= \\\n-e WIREGUARD_ADDRESSES=\"10.64.222.21/32\" \\\n-e SERVER_CITIES=amsterdam qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=mullvad\n      - VPN_TYPE=wireguard\n      - WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=\n      - WIREGUARD_ADDRESSES=10.64.222.21/32\n      - SERVER_CITIES=Amsterdam\n</code></pre> <p>\u26a0\ufe0f  Openvpn will be removed by Mullvad in 2026 hence the openvpn example has been removed from here.</p>"},{"location":"Setup/Providers/mullvad/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=mullvad</code></li> </ul>"},{"location":"Setup/Providers/mullvad/#openvpn-only","title":"OpenVPN only","text":"<ul> <li><code>OPENVPN_USER</code> which is your Mullvad user ID.</li> </ul>"},{"location":"Setup/Providers/mullvad/#wireguard-only","title":"Wireguard only","text":"<ul> <li><code>WIREGUARD_PRIVATE_KEY</code> is your 32 bytes key in base64 format. The private key can only be obtained by generating a Wireguard configuration file. The <code>Wireguard Key</code> displayed on the Manage devices and ports page on Mullvad is not the private key that is required. Generate a Wireguard configuration file, download the zip file, extract any of the <code>.json</code> files within and use the <code>PrivateKey</code> value. Note this value is the same for all Mullvad servers. \ud83d\udc81 Screenshots on how to obtain it.</li> <li><code>WIREGUARD_ADDRESSES</code> is the Wireguard IP network interface address in CIDR format <code>xx.xx.xx.xx/xx</code>. To obtain it, first download a Wireguard configuration file using same steps as for <code>WIREGUARD_PRIVATE_KEY</code> above. In the configuration file, locate the <code>Address</code> value. This one should contain a comma delimited list of an IPv4 and IPv6 address, so use the IPv4 address (usually the first one) as the value for the <code>WIREGUARD_ADDRESSES</code> environment variable. Note this is the same value for all Mullvad servers and for your private key. \ud83d\udc81 Screenshots on how to obtain it.</li> </ul>"},{"location":"Setup/Providers/mullvad/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_COUNTRIES</code>: Comma separated list of countries</li> <li><code>SERVER_CITIES</code>: Comma separated list of cities</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> <li><code>ISP</code>: Comma separated list of ISPs</li> <li><code>OWNED_ONLY</code>: If the VPN server is owned by Mullvad. It defaults to <code>no</code>, meaning it includes all servers. It can be set to <code>yes</code>.</li> </ul>"},{"location":"Setup/Providers/mullvad/#openvpn-only_1","title":"OpenVPN only","text":"<ul> <li><code>OPENVPN_ENDPOINT_PORT</code> which can be:</li> <li>TCP: it can only be <code>80</code>, <code>443</code> or <code>1401</code></li> <li>UDP: it can only be <code>53</code>, <code>1194</code>, <code>1195</code>, <code>1196</code>, <code>1197</code>, <code>1300</code>, <code>1301</code>,   <code>1302</code>, <code>1303</code> or <code>1400</code></li> <li>It defaults to <code>443</code> for TCP and <code>1194</code> for UDP</li> </ul>"},{"location":"Setup/Providers/mullvad/#wireguard-only_1","title":"WireGuard only","text":"<ul> <li><code>WIREGUARD_ENDPOINT_PORT</code> which can be any value and defaults to <code>51820</code></li> </ul>"},{"location":"Setup/Providers/mullvad/#ipv6-tunneling-with-openvpn","title":"IPv6 tunneling with OpenVPN","text":"<p>Mullvad supports IPv6 addresseses for their OpenVPN servers, and these should automatically be used at random if your container setup has IPv6 enabled. See the IPv6 documentation for more information.</p>"},{"location":"Setup/Providers/mullvad/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/nordvpn/","title":"NordVPN","text":""},{"location":"Setup/Providers/nordvpn/#tldr","title":"TLDR","text":"<pre><code># OpenVPN\ndocker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=nordvpn \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <p>\ud83d\udc81 Your credentials are NO LONGER your email+password, it is now your service credentials.</p> <p>\u25b6\ufe0f obtain your service credential</p> <pre><code># Wireguard\ndocker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=nordvpn \\\n-e VPN_TYPE=wireguard \\\n-e WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU= \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <p>\u25b6\ufe0f obtain your Wireguard private key</p> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=nordvpn\n      - VPN_TYPE=openvpn # or wireguard\n      - OPENVPN_USER=abc\n      - OPENVPN_PASSWORD=abc\n      - SERVER_COUNTRIES=Netherlands\n</code></pre>"},{"location":"Setup/Providers/nordvpn/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=nordvpn</code></li> </ul>"},{"location":"Setup/Providers/nordvpn/#openvpn-only","title":"OpenVPN only","text":"<ul> <li><code>OPENVPN_USER</code></li> <li><code>OPENVPN_PASSWORD</code></li> </ul>"},{"location":"Setup/Providers/nordvpn/#wireguard-only","title":"Wireguard only","text":"<ul> <li><code>WIREGUARD_PRIVATE_KEY</code></li> </ul>"},{"location":"Setup/Providers/nordvpn/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_COUNTRIES</code>: Comma separated list of countries</li> <li><code>SERVER_REGIONS</code>: Comma separated list of regions</li> <li><code>SERVER_CITIES</code>: Comma separated list of server cities</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> <li><code>SERVER_CATEGORIES</code>: Comma separated list of server categories</li> </ul>"},{"location":"Setup/Providers/nordvpn/#obtain-your-wireguard-private-key","title":"Obtain your Wireguard private key","text":"<p>Update 2023-09-24: you need to retrieve it from their web interface in manual setup section, see this comment.</p>"},{"location":"Setup/Providers/nordvpn/#servers","title":"Servers","text":"<p>The list of servers for NordVPN is available in the source code.</p> <p>The table of servers cannot be put here unfortunately as there are too many servers and the Github markdown engine then fails.</p>"},{"location":"Setup/Providers/perfect-privacy/","title":"Perfect Privacy","text":""},{"location":"Setup/Providers/perfect-privacy/#tldr","title":"TLDR","text":"<pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=\"perfect privacy\" \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_CITIES=Amsterdam qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=perfect privacy\n      - OPENVPN_USER=abc\n      - OPENVPN_PASSWORD=abc\n      - SERVER_CITIES=Amsterdam\n</code></pre> <p>\u26a0\ufe0f If you want to use DNS over TLS, disable the TrackStop Filter for fraud (see this issue)</p>"},{"location":"Setup/Providers/perfect-privacy/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=perfect privacy</code></li> <li><code>OPENVPN_USER</code></li> <li><code>OPENVPN_PASSWORD</code></li> </ul>"},{"location":"Setup/Providers/perfect-privacy/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_CITIES</code>: Comma separated list of cities</li> </ul>"},{"location":"Setup/Providers/perfect-privacy/#vpn-server-port-forwarding","title":"VPN server port forwarding","text":"<p>Set <code>VPN_PORT_FORWARDING=on</code> and the 3 ports forwarded will be logged out as well as available via the http control server.</p>"},{"location":"Setup/Providers/perfect-privacy/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/privado/","title":"Privado","text":""},{"location":"Setup/Providers/privado/#tldr","title":"TLDR","text":"<pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=privado \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=privado\n      - OPENVPN_USER=abc\n      - OPENVPN_PASSWORD=abc\n      - SERVER_COUNTRIES=Netherlands\n</code></pre>"},{"location":"Setup/Providers/privado/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=privado</code></li> <li><code>OPENVPN_USER</code></li> <li><code>OPENVPN_PASSWORD</code></li> </ul>"},{"location":"Setup/Providers/privado/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_COUNTRIES</code>: Comma separated list of countries</li> <li><code>SERVER_REGIONS</code>: Comma separated list of regions</li> <li><code>SERVER_CITIES</code>: Comma separated list of cities</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> </ul>"},{"location":"Setup/Providers/privado/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/private-internet-access/","title":"Private Internet Access","text":""},{"location":"Setup/Providers/private-internet-access/#openvpn","title":"OpenVPN","text":"<pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=\"private internet access\" \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-v /yourpath/gluetun:/gluetun \\\n-e SERVER_REGIONS=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    volumes:\n      - ./gluetun:/gluetun\n    environment:\n      - VPN_SERVICE_PROVIDER=private internet access\n      - OPENVPN_USER=abc\n      - OPENVPN_PASSWORD=abc\n      - SERVER_REGIONS=Netherlands\n</code></pre>"},{"location":"Setup/Providers/private-internet-access/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=private internet access</code></li> <li><code>OPENVPN_USER</code></li> <li><code>OPENVPN_PASSWORD</code></li> </ul>"},{"location":"Setup/Providers/private-internet-access/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_REGIONS</code>: Comma separated list of regions</li> <li><code>SERVER_NAMES</code>: Comma separated list of server names</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> <li><code>PORT_FORWARD_ONLY</code>: Set to <code>true</code> to select servers with port forwarding only</li> <li><code>PRIVATE_INTERNET_ACCESS_OPENVPN_ENCRYPTION_PRESET</code>: Encryption preset, defaulting to <code>strong</code>, which can be set to <code>normal</code>, <code>strong</code> or <code>none</code>. \u26a0\ufe0f <code>none</code> disables the <code>cipher</code> and <code>auth</code> OpenVPN options.</li> <li><code>OPENVPN_ENDPOINT_PORT</code>: Custom OpenVPN server endpoint port</li> <li><code>VPN_PORT_FORWARDING</code>: defaults to <code>off</code> and can be set to <code>on</code>to enable port forwarding on the VPN server</li> <li><code>VPN_PORT_FORWARDING_STATUS_FILE</code>: File path to write the forwarded port number to. It defaults to <code>/tmp/gluetun/forwarded_port</code>.</li> </ul>"},{"location":"Setup/Providers/private-internet-access/#wireguard","title":"Wireguard","text":"<p>\ud83d\udc81 For now, native support cannot be added, but this is a slow work in progress.</p> <p>In the meantime, @Kieros proposes to use kylegrantlucas/pia-wg-config to extract a Wireguard configuration file which you can then use with the custom provider.</p> <p>For VPN server port fowarding with Wireguard, you need to set:</p> <ul> <li><code>VPN_PORT_FORWARDING=on</code></li> <li><code>VPN_PORT_FORWARDING_PROVIDER=private internet access</code></li> <li><code>VPN_PORT_FORWARDING_USERNAME=yourusername</code></li> <li><code>VPN_PORT_FORWARDING_PASSWORD=yourpassword</code></li> <li><code>SERVER_NAMES=the-tls-server-name</code> for example <code>panama408</code></li> </ul>"},{"location":"Setup/Providers/private-internet-access/#vpn-server-port-forwarding","title":"VPN server port forwarding","text":""},{"location":"Setup/Providers/private-internet-access/#warning","title":"Warning","text":"<p>In my experience, port forwarding with PIA is not really working for some reason. It seems to only work for p2p applications, PIA might be doing deep packet inspection on the forwarded port.</p> <p>From @ddelange on issue #464, further confirming this:</p> <p>PIA replied that their service does not support incoming connections over a forwarded port. I also don't understand the answer (I was asking specifically about hosting a webserver on the forwarded port), because incoming connections on the forwarded port seem to work fine e.g. for P2P protocols</p>"},{"location":"Setup/Providers/private-internet-access/#setup","title":"Setup","text":"<p>First refer to the VPN server port forwarding setup page.</p> <p>Once enabled, you will keep the same forwarded port for 60 days as long as you bind mount the <code>/gluetun</code> directory. It will be automatically refreshed.</p>"},{"location":"Setup/Providers/private-internet-access/#deluge","title":"Deluge","text":"<p>@jawilson developed a plugin to automagically update the forwarded port in Deluge: deluge-piaportplugin</p>"},{"location":"Setup/Providers/private-internet-access/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/privatevpn/","title":"PrivateVPN","text":""},{"location":"Setup/Providers/privatevpn/#tldr","title":"TLDR","text":"<p>\ud83d\udc81 To use with Wireguard, see the custom provider Wireguard section.</p> <p>For OpenVPN:</p> <pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=privatevpn \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=privatevpn\n      - OPENVPN_USER=abc\n      - OPENVPN_PASSWORD=abc\n      - SERVER_COUNTRIES=Netherlands\n</code></pre>"},{"location":"Setup/Providers/privatevpn/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=privatevpn</code></li> <li><code>OPENVPN_USER</code></li> <li><code>OPENVPN_PASSWORD</code></li> </ul>"},{"location":"Setup/Providers/privatevpn/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_COUNTRIES</code>: Comma separated list of countries</li> <li><code>SERVER_CITIES</code>: Comma separated list of cities</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> <li><code>OPENVPN_ENDPOINT_PORT</code>: Custom OpenVPN server endpoint port to use</li> </ul>"},{"location":"Setup/Providers/privatevpn/#vpn-server-port-forwarding","title":"VPN server port forwarding","text":"<p>Set <code>VPN_PORT_FORWARDING=on</code> and the port forwarded will be logged out as well as available via the http control server.</p>"},{"location":"Setup/Providers/privatevpn/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/protonvpn/","title":"ProtonVPN","text":""},{"location":"Setup/Providers/protonvpn/#tldr","title":"TLDR","text":"<pre><code># OpenVPN\ndocker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=protonvpn \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code># Wireguard\ndocker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=protonvpn \\\n-e VPN_TYPE=wireguard \\\n-e WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU= \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=protonvpn\n      - VPN_TYPE=wireguard\n      - WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=\n      - SERVER_COUNTRIES=Netherlands\n</code></pre>"},{"location":"Setup/Providers/protonvpn/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=protonvpn</code></li> </ul>"},{"location":"Setup/Providers/protonvpn/#openvpn-only","title":"OpenVPN only","text":"<ul> <li><code>OPENVPN_USER</code> is your OPENVPN specific username. Find it at account.proton.me/u/0/vpn/OpenVpnIKEv2.</li> <li><code>OPENVPN_PASSWORD</code></li> </ul>"},{"location":"Setup/Providers/protonvpn/#wireguard-only","title":"Wireguard only","text":"<ul> <li><code>VPN_TYPE=wireguard</code></li> <li><code>WIREGUARD_PRIVATE_KEY</code> is your 32 byte key in base64 format. The private key can be obtained by generating a Wireguard configuration file and copy the displayed <code>PrivateKey</code> value. Note this value is the same for all ProtonVPN servers. \ud83d\udc81 Guide on how to generate a configuration file</li> </ul>"},{"location":"Setup/Providers/protonvpn/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_COUNTRIES</code>: Comma separated list of countries</li> <li><code>SERVER_REGIONS</code>: Comma separated list of regions</li> <li><code>SERVER_CITIES</code>: Comma separated list of cities</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> <li><code>FREE_ONLY</code>: Filter only free tier servers by setting it to <code>on</code>. It defaults to <code>off</code>.</li> <li><code>STREAM_ONLY</code>: Filter only streaming servers by setting it to <code>on</code>. It defaults to <code>off</code>.</li> <li><code>SECURE_CORE_ONLY</code>: Filter only secure core servers by setting it to <code>on</code>. It defaults to <code>off</code>.</li> <li><code>TOR_ONLY</code>: Filter only TOR servers by setting it to <code>on</code>. It defaults to <code>off</code>.</li> <li><code>PORT_FORWARD_ONLY</code>: Filter only port-forwarding enabled (aka p2p) servers by setting it to <code>on</code>. It defaults to <code>off</code>.</li> <li><code>OPENVPN_ENDPOINT_PORT</code>: Custom OpenVPN server endpoint port to use</li> <li>For TCP: <code>443</code>, <code>5995</code> or <code>8443</code></li> <li>For UDP: <code>80</code>, <code>443</code>, <code>1194</code>, <code>4569</code>, <code>5060</code></li> <li>Defaults are <code>1194</code> for UDP and <code>443</code> for TCP</li> <li><code>VPN_PORT_FORWARDING</code>: defaults to <code>off</code> and can be set to <code>on</code>to enable port forwarding on the VPN server.</li> </ul>"},{"location":"Setup/Providers/protonvpn/#vpn-server-port-forwarding","title":"VPN server port forwarding","text":"<p>Requirements:</p> <ul> <li><code>VPN_PORT_FORWARDING=on</code></li> <li>For OpenVPN only, append <code>+pmp</code> to your OpenVPN username (thanks to @mortimr). If needed, see the ProtonVPN OpenVPN port forwarding documentation.</li> </ul> <p>ProtonVPN will forward a random port. See vpn port forwarding options for ways to access the forwarded port. Additionally it is also available in the logs and can be redirected automatically using port forwarding options. Subsequently you can setup your favourite software to listen on the given port, or use redirection. Redirection might not be sufficient in all cases, as the software (i.e. Torrenting) may broadcast the port it's listening on which is not the redirected port.</p>"},{"location":"Setup/Providers/protonvpn/#multi-hop-regions","title":"Multi hop regions","text":"<p>Simply set the <code>SERVER_HOSTNAMES</code> environment variable to a hostname corresponding to a multi hop region (see Servers).</p> <p>For example setting <code>SERVER_HOSTNAMES=ch-us-01a.protonvpn.com</code> would set a multi hop with entry in Switzerland and exit in the US.</p>"},{"location":"Setup/Providers/protonvpn/#moderate-natnat-type-2","title":"Moderate NAT/NAT Type 2","text":"<p>Paid ProtonVPN subscribers can optionally use Moderate NAT on their connections.</p> <ul> <li>OpenVPN: append <code>+nr</code> to your ProtonVPN username</li> <li>WireGuard: when generating a configuration file, under <code>Select VPN options</code>, enable <code>Moderate NAT</code></li> </ul>"},{"location":"Setup/Providers/protonvpn/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/purevpn/","title":"PureVPN","text":""},{"location":"Setup/Providers/purevpn/#tldr","title":"TLDR","text":"<pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=purevpn \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=purevpn\n      - OPENVPN_USER=abc\n      - OPENVPN_PASSWORD=abc\n      - SERVER_COUNTRIES=Netherlands\n</code></pre> <p>\ud83d\udc81 To use with Wireguard, see the custom provider Wireguard section.</p>"},{"location":"Setup/Providers/purevpn/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=purevpn</code></li> <li><code>OPENVPN_USER</code></li> <li><code>OPENVPN_PASSWORD</code></li> </ul>"},{"location":"Setup/Providers/purevpn/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_COUNTRIES</code>: Comma separated list of countries</li> <li><code>SERVER_REGIONS</code>: Comma separated list of regions</li> <li><code>SERVER_CITIES</code>: Comma separated list of cities</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> </ul>"},{"location":"Setup/Providers/purevpn/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/slickvpn/","title":"SlickVPN","text":""},{"location":"Setup/Providers/slickvpn/#tldr","title":"TLDR","text":"<ol> <li>Setup your client encrypted key</li> <li>Setup your client certificate</li> </ol> <pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=slickvpn \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=slickvpn\n      - OPENVPN_USER=abc\n      - OPENVPN_PASSWORD=abc\n      - SERVER_COUNTRIES=Netherlands\n</code></pre>"},{"location":"Setup/Providers/slickvpn/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=slickvpn</code></li> <li><code>OPENVPN_USER</code></li> <li><code>OPENVPN_PASSWORD</code></li> </ul>"},{"location":"Setup/Providers/slickvpn/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_REGIONS</code>: Comma separated list of regions</li> <li><code>SERVER_COUNTRIES</code>: Comma separated list of countries</li> <li><code>SERVER_CITIES</code>: Comma separated list of cities</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> </ul>"},{"location":"Setup/Providers/slickvpn/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/surfshark/","title":"Surfshark","text":""},{"location":"Setup/Providers/surfshark/#tldr","title":"TLDR","text":"<pre><code># OpenVPN\ndocker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=surfshark \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code># Wireguard\ndocker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=surfshark \\\n-e VPN_TYPE=wireguard \\\n-e WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU= \\\n-e WIREGUARD_ADDRESSES=\"10.64.222.21/16\" \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=surfshark\n      - VPN_TYPE=wireguard\n      - WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=\n      - WIREGUARD_ADDRESSES=10.64.222.21/16\n      - SERVER_COUNTRIES=Netherlands\n</code></pre>"},{"location":"Setup/Providers/surfshark/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=surfshark</code></li> </ul>"},{"location":"Setup/Providers/surfshark/#openvpn-only","title":"OpenVPN only","text":"<ul> <li><code>OPENVPN_USER</code> which you can find in VPN &gt; Manual setup &gt; Credentials</li> <li><code>OPENVPN_PASSWORD</code> which you can find in VPN &gt; Manual setup &gt; Credentials</li> </ul>"},{"location":"Setup/Providers/surfshark/#wireguard-only","title":"Wireguard only","text":"<ul> <li><code>WIREGUARD_PRIVATE_KEY</code> is your 32 bytes key in base64 format. The private key can only be registered (and eventually generated) with these steps:</li> <li>Log into your Surfshark account</li> <li>Select VPN from the left menu</li> <li>Select Manual Setup</li> <li>Select Deskop or mobile</li> <li>Select WireGuard</li> <li>Select I don't have a keypair and enter a name for the key</li> <li>Select Generate a new keypair</li> <li>Use the Private key value for the <code>WIREGUARD_PRIVATE_KEY</code> environment variable</li> <li>Next select a location and download the config file (Ignore the information on screen as it will not work with GlueTUN)</li> <li>Within the config file obtain the IP on the <code>Address</code> line this is used for the <code>WIREGUARD_ADDRESSES</code> to connect.</li> <li><code>WIREGUARD_ADDRESSES</code> is the Wireguard IP network interface address in CIDR format <code>xx.xx.xx.xx/xx</code>. To obtain it, first download a Wireguard configuration file using same steps as for <code>WIREGUARD_PRIVATE_KEY</code> above. In the configuration file, locate the <code>Address</code> value. This one should contain a comma delimited list of an IPv4 and IPv6 address, so use the IPv4 address (usually the first one) as the value for the <code>WIREGUARD_ADDRESSES</code> environment variable. You can add the IPv6 address if your setup supports IPv6. Note this is the same value for all Surfshark servers and for your private key.</li> </ul>"},{"location":"Setup/Providers/surfshark/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>VPN_TYPE</code>: <code>openvpn</code> or <code>wireguard</code></li> <li><code>SERVER_COUNTRIES</code>: Comma separated list of countries</li> <li><code>SERVER_REGIONS</code>: Comma separated list of regions</li> <li><code>SERVER_CITIES</code>: Comma separated list of cities</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> </ul>"},{"location":"Setup/Providers/surfshark/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/torguard/","title":"Torguard","text":""},{"location":"Setup/Providers/torguard/#tldr","title":"TLDR","text":"<p>\ud83d\udc81 To use with Wireguard, see the custom provider Wireguard section.</p> <p>For OpenVPN:</p> <pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=torguard \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=torguard\n      - OPENVPN_USER=abc\n      - OPENVPN_PASSWORD=abc\n      - SERVER_COUNTRIES=Netherlands\n</code></pre> <p>\ud83d\udc81 To use with Wireguard, see the custom provider Wireguard section.</p>"},{"location":"Setup/Providers/torguard/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=torguard</code></li> <li><code>OPENVPN_USER</code></li> <li><code>OPENVPN_PASSWORD</code></li> </ul>"},{"location":"Setup/Providers/torguard/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_COUNTRIES</code>: Comma separated list of countries</li> <li><code>SERVER_CITIES</code>: Comma separated list of cities</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> </ul>"},{"location":"Setup/Providers/torguard/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/vpn-secure/","title":"VPN Secure","text":""},{"location":"Setup/Providers/vpn-secure/#tldr","title":"TLDR","text":"<ol> <li>Setup your client encrypted key</li> <li>Setup your client certificate</li> </ol> <pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=vpnsecure \\\n-v /yourpath/gluetun:/gluetun \\\n-e OPENVPN_KEY_PASSPHRASE=abc \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=vpnsecure\n      - OPENVPN_KEY_PASSPHRASE=abc\n      - SERVER_COUNTRIES=Netherlands\n    volumes:\n      # gluetun directory must contain the certificate\n      # as client.crt and the encrypted key as openvpn_encrypted_key\n      - ./gluetun:/gluetun\n</code></pre>"},{"location":"Setup/Providers/vpn-secure/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=vpnsecure</code></li> <li><code>OPENVPN_KEY_PASSPHRASE</code> is your account password</li> </ul>"},{"location":"Setup/Providers/vpn-secure/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_REGIONS</code>: Comma separated list of regions</li> <li><code>SERVER_CITIES</code>: Comma separated list of cities</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> <li><code>PREMIUM_ONLY</code>: <code>yes</code> or <code>no</code></li> </ul>"},{"location":"Setup/Providers/vpn-secure/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/vpn-unlimited/","title":"VPN Unlimited","text":""},{"location":"Setup/Providers/vpn-unlimited/#tldr","title":"TLDR","text":"<p>\ud83d\udc81 To use with Wireguard, see the custom provider Wireguard section</p> <p>For OpenVPN:</p> <ol> <li>Setup your client key</li> <li>Setup your client certificate</li> </ol> <pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=\"vpn unlimited\" \\\n-v /yourpath/gluetun:/gluetun \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_COUNTRIES=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=vpn unlimited\n      - OPENVPN_USER=abc\n      - OPENVPN_PASSWORD=abc\n      - SERVER_COUNTRIES=Netherlands\n    volumes:\n      - ./gluetun:/gluetun\n</code></pre>"},{"location":"Setup/Providers/vpn-unlimited/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=vpn unlimited</code></li> <li><code>OPENVPN_USER</code></li> <li><code>OPENVPN_PASSWORD</code></li> </ul>"},{"location":"Setup/Providers/vpn-unlimited/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_COUNTRIES</code>: Comma separated list of countries</li> <li><code>SERVER_REGIONS</code>: Comma separated list of regions</li> <li><code>SERVER_CITIES</code>: Comma separated list of cities</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> </ul>"},{"location":"Setup/Providers/vpn-unlimited/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/vyprvpn/","title":"VyprVPN","text":""},{"location":"Setup/Providers/vyprvpn/#tldr","title":"TLDR","text":"<pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=vyprvpn \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_REGIONS=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=vyprvpn\n      - OPENVPN_USER=abc\n      - OPENVPN_PASSWORD=abc\n      - SERVER_REGIONS=Netherlands\n</code></pre> <p>\ud83d\udc81 To use with Wireguard, see the custom provider Wireguard section.</p>"},{"location":"Setup/Providers/vyprvpn/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=vyprvpn</code></li> <li><code>OPENVPN_USER</code></li> <li><code>OPENVPN_PASSWORD</code></li> </ul>"},{"location":"Setup/Providers/vyprvpn/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_REGIONS</code>: Comma separated list of regions</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> </ul>"},{"location":"Setup/Providers/vyprvpn/#vpn-server-port-forwarding","title":"VPN server port forwarding","text":"<p>By default, VyprVPN does not forward any port.</p> <p>You need to disable the NAT firewall in the Manage services section of your account at account.vyprvpn.com (source).</p> <p>All the ports will then be forwarded to you, so it's like you are running alone on the VPN server.</p> <p>Therefore, you only need to allow these ports through the gluetun firewall by setting the ports you need in <code>FIREWALL_VPN_INPUT_PORTS</code>. For example <code>FIREWALL_VPN_INPUT_PORTS=8000,9000</code>.</p>"},{"location":"Setup/Providers/vyprvpn/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/wevpn/","title":"WeVPN","text":""},{"location":"Setup/Providers/wevpn/#tldr","title":"TLDR","text":"<p>\ud83d\udc81 To use with Wireguard, see the custom provider Wireguard section.</p> <p>First, setup your client key. Then you can use:</p> <pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=wevpn \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_CITIES=Amsterdam qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=wevpn\n      - OPENVPN_USER=abc\n      - OPENVPN_PASSWORD=abc\n      - SERVER_CITIES=Amsterdam\n</code></pre>"},{"location":"Setup/Providers/wevpn/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=wevpn</code></li> <li><code>OPENVPN_USER</code></li> <li><code>OPENVPN_PASSWORD</code></li> </ul>"},{"location":"Setup/Providers/wevpn/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_CITIES</code>: Comma separated list of cities</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> <li><code>OPENVPN_ENDPOINT_PORT</code>: Custom OpenVPN server endpoint port</li> <li>For TCP: <code>53</code>, <code>1195</code>, <code>1199</code> or <code>2018</code></li> <li>For UDP: <code>80</code>, <code>1194</code> or <code>1198</code></li> </ul>"},{"location":"Setup/Providers/wevpn/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"Setup/Providers/windscribe/","title":"Windscribe","text":""},{"location":"Setup/Providers/windscribe/#tldr","title":"TLDR","text":"<pre><code># OpenVPN\ndocker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=windscribe \\\n-e VPN_TYPE=openvpn \\\n-e OPENVPN_USER=abc -e OPENVPN_PASSWORD=abc \\\n-e SERVER_REGIONS=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code># Wireguard\ndocker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n-e VPN_SERVICE_PROVIDER=windscribe \\\n-e VPN_TYPE=wireguard \\\n-e WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU= \\\n-e WIREGUARD_ADDRESSES=\"10.64.222.21/32\" \\\n-e WIREGUARD_PRESHARED_KEY= \\\n-e SERVER_REGIONS=Netherlands qmcgaw/gluetun\n</code></pre> <pre><code>version: \"3\"\nservices:\n  gluetun:\n    image: qmcgaw/gluetun\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - VPN_SERVICE_PROVIDER=windscribe\n      - VPN_TYPE=wireguard\n      - WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=\n      - WIREGUARD_ADDRESSES=10.64.222.21/32\n      - WIREGUARD_PRESHARED_KEY=\n      - SERVER_REGIONS=Netherlands\n</code></pre>"},{"location":"Setup/Providers/windscribe/#required-environment-variables","title":"Required environment variables","text":"<ul> <li><code>VPN_SERVICE_PROVIDER=windscribe</code></li> <li>For \"Build a Plan\" subscriptions, you need to set <code>SERVER_REGIONS</code> to the region(s) you have access to. For example, <code>SERVER_REGIONS=Sweden,Italy</code>.</li> </ul>"},{"location":"Setup/Providers/windscribe/#openvpn-only","title":"OpenVPN only","text":"<ul> <li><code>OPENVPN_USER</code>: Your username (get it from a generated config file from fra.windscribe.com/getconfig/openvpn)</li> <li><code>OPENVPN_PASSWORD</code>: Your password (get it from a generated config file from fra.windscribe.com/getconfig/openvpn)</li> </ul>"},{"location":"Setup/Providers/windscribe/#wireguard-only","title":"Wireguard only","text":"<ul> <li><code>WIREGUARD_PRIVATE_KEY</code> is your 32 bytes key in base64 format. Note this is specific by user and the same for all servers.</li> <li><code>WIREGUARD_ADDRESSES</code> is your IP network interface address in the format <code>xx.xx.xx.xx/xx</code>. Note this is specific by user and the same for all servers.</li> <li><code>WIREGUARD_PRESHARED_KEY</code> is your optional preshared key</li> </ul>"},{"location":"Setup/Providers/windscribe/#optional-environment-variables","title":"Optional environment variables","text":"<ul> <li><code>SERVER_REGIONS</code>: Comma separated list of regions</li> <li><code>SERVER_CITIES</code>: Comma separated list of cities</li> <li><code>SERVER_HOSTNAMES</code>: Comma separated list of server hostnames</li> <li><code>OPENVPN_ENDPOINT_PORT</code>: Custom OpenVPN server endpoint port to use, see this list of ports</li> <li><code>WIREGUARD_ENDPOINT_PORT</code>: Custom Wireguard server endpoint port to use, which can be one of: <code>53</code>, <code>80</code>, <code>123</code>, <code>443</code>, <code>1194</code>, <code>65142</code></li> </ul>"},{"location":"Setup/Providers/windscribe/#vpn-server-port-forwarding","title":"VPN server port forwarding","text":""},{"location":"Setup/Providers/windscribe/#ephemeral-port-forwarding","title":"Ephemeral port forwarding","text":"<ol> <li>Follow the Windscribe instructions</li> <li>In your container configuration, set <code>FIREWALL_VPN_INPUT_PORTS</code> to the port you have been assigned, for example: <code>FIREWALL_VPN_INPUT_PORTS=8099</code></li> </ol>"},{"location":"Setup/Providers/windscribe/#permanent-port-forwarding-static-ip","title":"Permanent port forwarding (static IP)","text":"<ol> <li>Follow the custom provider setup instructions, using the openvpn or wireguard configuration file that Windscribe provides for static ips.</li> <li>In your container configuration, set <code>FIREWALL_VPN_INPUT_PORTS</code> to the port you have been assigned, for example: <code>FIREWALL_VPN_INPUT_PORTS=8099</code></li> </ol>"},{"location":"Setup/Providers/windscribe/#servers","title":"Servers","text":"<p>To see a list of servers available, list the VPN servers with Gluetun.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>There are multiple ways to contribute:</p> <ul> <li>Help others</li> <li>Github issues</li> <li>Github discussions</li> <li>Donate</li> <li>Github sponsors</li> <li>Paypal</li> <li>Code</li> </ul> <p>And of course, Thank you</p>"},{"location":"contributing/#donate","title":"Donate","text":""},{"location":"contributing/#github-sponsors","title":"Github sponsors","text":"<p>You can sponsor me on github.com/sponsors/qdm12</p> <p></p>"},{"location":"contributing/#paypal","title":"Paypal","text":"<p>You can do a one time donation to paypal.me/qmcgaw</p> <p></p>"},{"location":"contributing/#code","title":"Code","text":"<p>You can contribute to the code written in Go. Notably, you can (since <code>v3.30.0</code>) easily add new VPN providers. Please go to the development page on how to get started.</p>"},{"location":"contributing/#thank-you","title":"Thank you","text":""},{"location":"contributing/#code-contributors","title":"Code contributors","text":"<p>Thanks for all the code contributions, whether small or not so small!</p> <ul> <li>@JeordyR for testing the Mullvad version and opening a PR with a few fixes \ud83d\udc4d</li> <li>@rorph for a PR to pick a random region for PIA and a PR to make the container work with kubernetes</li> <li>@JesterEE for a PR to fix silly line endings in block lists back then \ud83d\udcce</li> <li>@elmerfdz for a PR to add timezone information to have correct log timestamps \ud83d\udd59</li> <li>@Juggels for a PR to write the PIA forwarded port to a file</li> <li>@gdlx for a PR to fix and improve PIA port forwarding script</li> <li>@janaz for keeping an eye on updating things in the Dockerfile</li> </ul>"},{"location":"contributing/#financial-contributors","title":"Financial contributors","text":"<p>Thanks for all the financial contributions, whether small or not so small!</p> <ul> <li>@Frepke</li> <li>@Raph521</li> <li>J. Hendriks</li> <li>G. Mendez</li> <li>M. Otmar Weber</li> <li>Alkalabs</li> <li>J. Silvagi</li> <li>J. Perez</li> <li>A. Cooper</li> <li>@beechfuzz</li> <li>I. Gaon</li> <li>Fabricio20</li> <li>Isaac C.</li> <li>Willian CH.</li> <li>P. Adam \ud83e\udd47</li> <li>L. Begum</li> <li>S. Castellucci</li> <li>@voyager529</li> <li>@harrytheeskimo</li> <li>@lostbow17</li> <li>@evandev</li> <li>@codetheweb</li> <li>@lavaguy1</li> <li>@estate000</li> <li>@ansred</li> <li>@den747</li> <li>Chistoph K.</li> <li>@enphor</li> <li>@KevinRohn</li> <li>@HippocampusGirl</li> <li>@msorelle</li> <li>Bernhard R.</li> <li>Conor A.</li> <li>Arash E. \ud83e\udd47</li> <li>Joseph F.</li> <li>Gabin G.</li> <li>M. Kusold</li> <li>D. McNamara</li> <li>S. Cox</li> </ul> <p>Please email me if there is any mistake \ud83d\ude09</p>"},{"location":"contributing/add-a-provider/","title":"Add a provider","text":""},{"location":"contributing/add-a-provider/#gather-information","title":"Gather information","text":"<p>You should gather information about the provider you want to add and add it in the corresponding Github issue.</p> <p>In particular, you should have:</p> <ol> <li>How to obtain server information from the provider: API url, zip url, HTML page, etc.?</li> <li>Does it support OpenVPN? If yes:<ol> <li>Does it support UDP? If yes, attach a configuration file for UDP (remove credentials)</li> <li>Does it support TCP? If yes, attach a configuration file for TCP (remove credentials)</li> <li>What are the user specific parts: username, password, private key, encryted private key, certificate?</li> </ol> </li> <li>Does it support Wireguard? If yes:<ol> <li>The interface <code>PrivateKey</code> and <code>Address</code>, as well as an eventual <code>PreSharedKey</code>, are different for each server: the user should use the <code>custom</code> provider, do not implement anything for Wireguard</li> <li>The interface <code>PrivateKey</code> and <code>Address</code>, as well as an eventual <code>PreSharedKey</code>, are the same for all servers:<ol> <li>All the servers public keys are the same public key: precise the public key</li> <li>All the servers public keys can be obtained (API url, zip url, etc.), precise the way to get them</li> <li>Servers public keys cannot be obtained or are user specific: the user should use the <code>custom</code> provider, do not implement anything for Wireguard</li> </ol> </li> </ol> </li> </ol> <p>You need to know the following:</p>"},{"location":"contributing/add-a-provider/#registration","title":"Registration","text":"<ol> <li> <p>Define a constant with your provider name in <code>internal/constants/providers/providers.go</code>:</p> <pre><code>const (\n  // Custom is the VPN provider name for custom\n  // VPN configurations.\n  Custom                = \"custom\"\n  // ...\n  YourProvider          = \"yourprovider\"\n  // ...\n)\n</code></pre> <p>The string constant should be all lowercase without spacings or underscores. Please make sure it is inserted in alphabetical order. 1. Add the constant previously defined to the <code>All()</code> function in <code>internal/constants/providers/providers.go</code>:</p> <pre><code>// All returns all the providers except the custom provider.\nfunc All() []string {\n return []string{\n    // ...\n    YourProvider,\n    // ...\n  }\n}\n</code></pre> <p>Please make sure it is inserted in alphabetical order. 1. Copy the provider example directory <code>internal/provider/example</code> to <code>internal/provider/&lt;provider-name&gt;</code>. 1. Rename the <code>package example</code> to <code>package yourprovider</code> from all the Go files in this newly copied directory. 1. Update the <code>Provider</code>'s <code>Name() string</code> method to return <code>providers.YourProvider</code> instead of <code>providers.Example</code>. 1. Update the import path in <code>internal/provider/yourprovider/provider.go</code> from <code>github.com/qdm12/gluetun/internal/provider/example/updater</code> to <code>github.com/qdm12/gluetun/internal/provider/yourprovider/updater</code>. 1. Register the provider code you added in the <code>NewProviders</code> function located in <code>internal/provider/providers.go</code>:</p> <pre><code>providerNameToProvider := map[string]Provider{\n  // ...\n  providers.YourProvider:   yourprovider.New(storage, randSource, client, unzipper, updaterWarner, parallelResolver),\n  // ...\n}\n</code></pre> <p>Please insert this entry in the map in alphabetical order.</p> </li> </ol>"},{"location":"contributing/add-a-provider/#updater-code","title":"Updater code","text":"<p>\u26a0\ufe0f This is the hardest part \u26a0\ufe0f</p> <p>First, add <code>\"yourprovider\": {\"version\": 1},</code> to the list of providers in <code>internal/storage/servers.json</code>.</p> <p>You need to adapt the example code in the <code>internal/provider/yourprovider/updater</code> Go package such that it can fetch and update VPN servers.</p> <p>There are several <code>// TODO</code> comments in the code to highlight what needs to be done, and with examples.</p> <p>You should start by reading the <code>FetchServers</code> method defined in the <code>servers.go</code> file, it contains important information in the form of comments.</p> <p>The base example code fetches servers information from a (fake) web HTTP API endpoint, and then parallel resolves hostnames to IP addresses. You have to modify this to fetch servers information for your specific provider.</p> <p>Once you are done, update the servers data in <code>internal/storage/servers.json</code> with:</p> <pre><code>go run ./cmd/gluetun/main.go update -maintainer -providers yourprovider\n</code></pre> <p>\ud83d\udc81 Make sure to check the result in <code>internal/storage/servers.json</code>. This might point you to some issues in your servers data update code written in <code>internal/provider/yourprovider/updater</code>.</p>"},{"location":"contributing/add-a-provider/#provider-code","title":"Provider code","text":"<p>This concerns Go files in the package <code>internal/provider/yourprovider</code>.</p> <p>You should check out each of the <code>// TODO</code> comments in the code to see what needs to be done, and remove them as you go. Notably, you should:</p> <ul> <li> <p>Modify in <code>connection.go</code> the default ports for each protocol combination:</p> <pre><code>defaults := utils.NewConnectionDefaults(443, 1194, 51820)\n</code></pre> <p>where the first one is for OpenVPN TCP, the second for OpenVPN UDP and the last for Wireguard (UDP).</p> </li> <li> <p>Modify the fields of the provider settings in <code>openvpnconf.go</code>:</p> <pre><code>providerSettings := utils.OpenVPNProviderSettings{\n  // ...\n}\n</code></pre> <p>to match the 'common' settings from their Openvpn configuration files. Note several server-specific OpenVPN options come from the server information in <code>internal/storage/servers.json</code>. Some are also automatically set for example if <code>VPN_INTERFACE=tun</code>.</p> </li> </ul>"},{"location":"contributing/add-a-provider/#settings-validation","title":"Settings validation","text":"<p>Gluetun is designed to have strict settings validation in order to fail early if an incorrect setting is provided by the user.</p> <p>You should thus aim at having settings as restrictive as possible for the new provider. For example, if the provider does not support OpenVPN TCP, the settings validation should catch that as an error.</p> <p>Settings are defined in the <code>internal/configuration/settings</code> package, where each Go file contains a settings structure with a <code>Validate() (err error)</code> method.</p> <p>In our OpenVPN-TCP unsupported example mentioned above, you should then modify the <code>Validate</code> method from <code>internal/configuration/settings/openvpnselection.go</code> and add the new provider to the list of unsupported providers in:</p> <pre><code>// Validate TCP\nif *o.TCP &amp;&amp; helpers.IsOneOf(vpnProvider,\n  providers.Ipvanish,\n  providers.Perfectprivacy,\n  providers.Privado,\n  providers.VPNUnlimited,\n  providers.Vyprvpn,\n) {\n  return fmt.Errorf(\"%w: for VPN service provider %s\",\n    ErrOpenVPNTCPNotSupported, vpnProvider)\n}\n</code></pre>"},{"location":"contributing/add-a-provider/#markdown-servers-table-formatting","title":"Markdown servers table formatting","text":"<p>This is needed to easily generate a Markdown table of all the servers information for the provider, which in turn is used in the Github Wiki.</p> <p>Register the new provider in <code>internal/models/markdown.go</code>:</p> <pre><code>func getMarkdownHeaders(vpnProvider string) (headers []string) {\n  switch vpnProvider {\n  // ...\n  case providers.YourProvider:\n    return []string{countryHeader, cityHeader, ispHeader, hostnameHeader, vpnHeader, tcpHeader, udpHeader}\n  // ...\n  }\n}\n</code></pre> <p>Depending on what fields each provider server has (i.e. country, region, etc.), you should adapt the list of headers above.</p> <p>In case you add a field to the <code>Server</code> model, you should then add a constant header in <code>internal/models/markdown.go</code>:</p> <pre><code>const (\n cityHeader        = \"City\"\n // ...\n newHeader         = \"new header\"\n // ...\n vpnHeader         = \"VPN\"\n)\n</code></pre> <p>And then add it to the <code>switch</code> in the method <code>ToMarkdown(headers ...string) (markdown string)</code>:</p> <pre><code>  switch header {\n  case cityHeader:\n    fields[i] = s.City\n    // ...\n  case newHeader:\n    fields[i] = s.NewField\n    // ...\n  }\n</code></pre>"},{"location":"contributing/add-a-provider/#github-documentation","title":"Github documentation","text":"<ul> <li> <p>Add the provider name to the list of VPN service provider in <code>.github/ISSUE_TEMPLATE/bug.yml</code>:</p> <pre><code>- type: dropdown\n  id: vpn-service-provider\n  attributes:\n    label: VPN service provider\n    options:\n      - Custom\n      - Cyberghost\n      # ...\n      - YourProvider\n      # ...\n</code></pre> <p>Please make sure it's inserted in the right alphabetical place in the list. - Add the provider name to the list of VPN service provider in <code>.github/labels.yml</code>:</p> <pre><code># VPN providers\n- name: \":cloud: Cyberghost\"\n  color: \"cfe8d4\"\n  description: \"\"\n# ...\n- name: \":cloud: YourProvider\"\n  color: \"cfe8d4\"\n  description: \"\"\n# ...\n</code></pre> <p>Please make sure it's inserted in the right alphabetical place in the list.</p> </li> <li> <p>Add the provider name to service providers enumeration in the <code>README.md</code>:</p> <pre><code>- Supports: **Cyberghost**, ..., **NewProviderName**, ..., **Windscribe** servers\n</code></pre> </li> </ul>"},{"location":"contributing/add-a-provider/#final-steps","title":"Final steps","text":"<p>Don't forget to open a pull request so your changes get merged in the base repository \ud83d\ude09 See the Development page Final steps section.</p>"},{"location":"contributing/add-a-provider/#optional","title":"Optional","text":"<p>These optional additions are code changes that may or may not be needed.</p>"},{"location":"contributing/add-a-provider/#add-a-user-provided-setting","title":"Add a user provided setting","text":"<p>You may need a new user-provided setting that is not already built in Gluetun.</p> <p>The settings are processed in the following order:</p> <ol> <li>Each setting value is read from the following sources order: secret files, plain files and environment variables. The first source containing a non empty setting value is used and other sources are skipped. This is done in the <code>internal/configuration/settings</code> directory, using the qdm12/gosettings library. The files source is in <code>internal/configuration/srouces/files</code> and the secrets source is in <code>internal/configuration/sources/secrets</code>. The environment variables source is built-in qdm12/gosettings already.</li> <li>Set the default values for any still unset setting values, using <code>setDefaults</code> methods in the <code>internal/configuration/settings</code> package.</li> <li>Validate the settings. This is done with <code>validate</code> methods defined in the <code>internal/configuration/settings</code> package.</li> </ol> <p>To add a setting, you need to do several code changes:</p> <ol> <li>Add a field to one of the settings structures in the <code>internal/configuration/settings</code> package.</li> <li>Add necessary code for the new field in the settings struct methods: <code>read</code>, <code>copy</code>, <code>overrideWith</code>, <code>setDefaults</code>, <code>toLinesNode</code> and <code>validate</code></li> <li>You may have to modify one or more sources in <code>internal/configuration/sources/</code> to return some settings values, if needed. Gluetun reads most settings from environment variables only, so feel free to limit the reading to environment variables.</li> </ol> <p>\u26a0\ufe0f If you add an environment variable, add it as its default value in the <code>Dockerfile</code> in the <code>ENV</code> section:</p> <pre><code>ENV VPN_SERVICE_PROVIDER=pia \\\n    # ...\n    NEW_VARIABLE_NAME= \\\n    # ...\n</code></pre>"},{"location":"contributing/add-a-provider/#add-a-field-to-the-server-model","title":"Add a field to the server model","text":"<p>The server model <code>Server</code> defined in <code>internal/models/server.go</code> is shared for all providers. You can add a field to it if needed for the new provider. If you do so, you would have to modify code in different places:</p> <ul> <li>add an if condition in the <code>filterServer</code> function defined in <code>internal/provider/utils/filtering.go</code> to filter servers with that new field</li> <li>add a test case in the <code>Test_FilterServers</code> function in <code>internal/provider/utils/filtering_test.go</code> to test cover that new code path you added</li> <li>add an if condition to the <code>noServerFoundError</code> function in <code>internal/storage/formatting.go</code> to add a part to <code>messageParts</code> if the field is set</li> <li>add code in <code>internal/models/markdown.go</code>, see the Markdown servers table formatting section</li> </ul>"},{"location":"contributing/add-a-provider/#add-an-openvpn-option","title":"Add an OpenVPN option","text":"<p>If you need an extra OpenVPN option in the generated OpenVPN configuration file, you can define it in the <code>OpenVPNConfig</code> function in <code>internal/provider/utils/openvpn.go</code>.</p> <p>For example to add the <code>tun-mtu</code> option, you can add:</p> <pre><code>if provider.TunMTU &gt; 0 {\n  lines.add(\"tun-mtu\", fmt.Sprint(provider.TunMTU))\n}\n</code></pre>"},{"location":"contributing/add-a-provider/#final-words","title":"Final words","text":"<p>If you reached the end of this document, first of all, congratulations!! \ud83c\udf89 \ud83c\udf96\ufe0f \ud83c\udfc5 \ud83e\udd47</p> <ul> <li>If anything is missing, please create a Wiki issue.</li> <li>If you have any question, please create a discussion.</li> </ul>"},{"location":"contributing/development/","title":"Development","text":""},{"location":"contributing/development/#setup","title":"Setup","text":""},{"location":"contributing/development/#getting-the-repository","title":"Getting the repository","text":"<ol> <li>Sign in or register for an account on Github</li> <li>Fork Gluetun to your account.</li> <li>Install Git</li> <li> <p>Clone the repository either with https or ssh:</p> <pre><code># HTTPS\ngit clone https://github.com/yourusername/gluetun.git\n# or SSH\ngit clone git@github.com:yourusername/gluetun.git\n</code></pre> </li> <li> <p>Go to the newly cloned <code>gluetun</code> directory</p> </li> </ol>"},{"location":"contributing/development/#development-environment","title":"Development environment","text":"<p>Since Gluetun is for now tightly coupled with Linux's <code>unix</code> &amp; <code>syscall</code> Go packages, you can develop it using one of the two options below:</p>"},{"location":"contributing/development/#development-container","title":"Development container","text":"<p>The development Docker container for VSCode is pre-configured for Gluetun and works on OSX, Linux and Windows.</p> <ol> <li>Install the following:<ol> <li>Docker</li> <li>Docker Compose</li> <li>VS code</li> <li>VS code remote containers extension</li> </ol> </li> <li>Make sure the following exist and are accessible by Docker:<ul> <li><code>~/.ssh</code> directory</li> <li><code>~/.gitconfig</code> file (can be empty)</li> </ul> </li> <li>Open the command palette in VS Code (CTRL+SHIFT+P).</li> <li>Select <code>Remote-Containers: Open Folder in Container...</code> and choose the Gluetun project directory.</li> </ol> <p>More information is available at the development container readme</p>"},{"location":"contributing/development/#linux-host-setup","title":"Linux host setup","text":"<ol> <li>Install Go</li> <li> <p>Download the dependencies</p> <pre><code>go mod download\n</code></pre> </li> <li> <p>Install golangci-lint</p> </li> <li>You might want to use an IDE such as VSCode with the Go extension</li> <li>You might want to install Docker to build and run the image.</li> </ol>"},{"location":"contributing/development/#modifying-the-code","title":"Modifying the code","text":"<p>Decide on a branch name for the feature you want to add, and then create that branch:</p> <pre><code>git checkout -b mybranchname\n</code></pre> <p>You can now start modifying the code and git commit your changes incrementally.</p> <p>Before committing each commit, make sure the following passes:</p> <pre><code># Linting\ngolangci-lint run\n# Tests\ngo test ./...\n</code></pre> <p>\ud83d\udc81 If you are new to Git and commits, you should read:</p> <ul> <li>Using Pull Requests</li> <li>Github blog: write better commits, build better projects</li> </ul> <p>To commit changes for example:</p> <pre><code># Stage all new and changed files\ngit add .\n# Commit the staged files\ngit commit -m \"description of my changes\"\n</code></pre> <p>You can also do this through IDE such as VS Code source control.</p> <p>\ud83d\udca1 Want to add a VPN provider? \u27a1\ufe0f Add a provider - this is a detailed step-by-step guide.</p> <p>\ud83d\udca1 Want to understand the project structure? \u27a1\ufe0f Project structure</p>"},{"location":"contributing/development/#testing-the-docker-container","title":"Testing the Docker container","text":"<ol> <li> <p>Build the image with:</p> <pre><code>docker build -t qmcgaw/gluetun .\n</code></pre> </li> <li> <p>Run it with:</p> <pre><code>docker run -it --rm --cap-add=NET_ADMIN --device /dev/net/tun \\\n  -e VPN_SERVICE_PROVIDER=someprovider \\\n  -e VPN_TYPE=openvpn \\\n  -e OPENVPN_USER=test -e OPENVPN_PASSWORD=test \\\n  -p 8000:8000/tcp \\\n  qmcgaw/gluetun\n</code></pre> </li> </ol>"},{"location":"contributing/development/#final-steps","title":"Final steps","text":"<ol> <li> <p>Push your new branch to your forked repository:</p> <pre><code>git push -u origin mybranchname\n</code></pre> </li> <li> <p>Open a pull request on the <code>qdm12/gluetun</code> repository</p> </li> <li>I will most likely leave feedback as comments on the pull request, which you would have to address in order to get your work merged in the base repository. And also feel free to ask any question there!</li> </ol>"},{"location":"contributing/profiling/","title":"Profiling","text":"<p>Since Gluetun is written in Go, you can relatively easily profile its performance. Note however this does not cover profiling OpenVPN nor Wireguard running in kernelspace.</p> <p>In the following, we assume:</p> <ul> <li>Gluetun runs on a server, 'your server', with IP address <code>192.168.1.2</code></li> <li>You have a computer with a screen, 'your computer', which can access your server at <code>192.168.2.2</code></li> </ul> <p>Follow these steps, adjusting the IP addresses to your needs:</p> <ol> <li>On your computer, install Go</li> <li>On your server, run Gluetun with port mapping <code>6060:6060/tcp</code> and set the environment variable <code>PPROF_ENABLED=yes</code>.</li> <li> <p>On your computer, run one of the following commands, which will open your browser to http://localhost:8000:</p> <ul> <li> <p>Profile heap memory</p> <pre><code>go tool pprof -http=localhost:8000 http://192.168.2.2:6060/debug/pprof/heap\n</code></pre> </li> <li> <p>Profile CPU for 30s</p> <pre><code>go tool pprof -http=localhost:8000 http://192.168.2.2:6060/debug/pprof/profile\n</code></pre> </li> </ul> </li> </ol> <p>You can further configure the pprof server with the following environment variables:</p> Variable Default Choices Description <code>PPROF_HTTP_SERVER_ADDRESS</code> <code>:6060</code> Listening address Pprof http server listening address <code>PPROF_BLOCK_PROFILE_RATE</code> <code>0</code> Positive integer Block profile rate, set to <code>0</code> to disable <code>PPROF_MUTEX_PROFILE_RATE</code> <code>0</code> Positive integer Mutex profile rate, set to <code>0</code> to disable"},{"location":"contributing/project-structure/","title":"Project structure","text":""},{"location":"contributing/project-structure/#introduction","title":"Introduction","text":"<p>Gluetun's entrypoint is the <code>main()</code> function in the Go file cmd/main.go.</p> <p>The rest of the code lives in:</p> <ul> <li>the internal directory</li> <li>the <code>qdm12/dns</code> package</li> <li>the <code>qdm12/ss-server</code> package</li> </ul>"},{"location":"errors/","title":"Common errors","text":"<p>This directory contains common errors and their resolution.</p> <ul> <li>TUN device common errors</li> <li>Firewall common errors</li> <li>OpenVPN common errors</li> <li>Routing common errors</li> </ul>"},{"location":"errors/firewall/","title":"Firewall common errors","text":"<p>The firewall right now is managed by <code>iptables</code> (<code>iptables-nft</code> preferred, and falls back on <code>iptables-legacy</code>) and <code>ip6tables</code> (<code>ip6tables-nft</code> preferred, and falls back on <code>ip6tables-legacy</code>). Some common errors with their resolution are listed below.</p>"},{"location":"errors/firewall/#table-does-not-exist-do-you-need-to-insmod","title":"<code>Table does not exist (do you need to insmod?)</code>","text":""},{"location":"errors/firewall/#raspberry-pis","title":"Raspberry Pis","text":"<p>This is common on Raspberry Pis.</p> <p>If you encounter the error:</p> <pre><code>iptables v1.8.10 (nf_tables): can't initialize iptables table `filter': Table does not exist (do you need to insmod?)\n</code></pre> <p>You likely need to update your system with <code>rpi-update</code>, see #400 for more information.</p>"},{"location":"errors/firewall/#podman","title":"Podman","text":"<p>Podman might need the extra capability <code>NET_RAW</code> added to Gluetun, on top of <code>NET_ADMIN</code>.</p>"},{"location":"errors/firewall/#permission-denied-you-must-be-root","title":"<code>Permission denied (you must be root)</code>","text":"<p>If you use Portainer to run the container and get the error:</p> <pre><code>2020-05-03T09:04:11.283Z ERROR failed executing \"-P INPUT ACCEPT\": iptables v1.8.10 (nf_tables): can't initialize iptables table `filter': Permission denied (you must be root)\nPerhaps iptables or your kernel needs to be upgraded.: exit status 3\n</code></pre> <p>This might be because Portainer does not set the <code>--cap_add=NET_ADMIN</code> successfully.</p> <p>You might need to run the container without Portainer in this case. More information on #139.</p>"},{"location":"errors/openvpn/","title":"OpenVPN common errors","text":""},{"location":"errors/openvpn/#inconsistence-warnings","title":"Inconsistence warnings","text":"<p>You might see some warnings for Private Internet Access and others, similar to:</p> <pre><code>openvpn: Sat Feb 22 15:55:02 2020 WARNING: 'link-mtu' is used inconsistently, local='link-mtu 1569', remote='link-mtu 1542'\nopenvpn: Sat Feb 22 15:55:02 2020 WARNING: 'cipher' is used inconsistently, local='cipher AES-256-CBC', remote='cipher BF-CBC'\nopenvpn: Sat Feb 22 15:55:02 2020 WARNING: 'auth' is used inconsistently, local='auth SHA256', remote='auth SHA1'\nopenvpn: Sat Feb 22 15:55:02 2020 WARNING: 'keysize' is used inconsistently, local='keysize 256', remote='keysize 128'\nopenvpn: Sat Feb 22 15:55:02 2020 WARNING: 'comp-lzo' is present in remote config but missing in local config, remote='comp-lzo'\n</code></pre> <p>It is mainly because the option disable-occ was removed for transparency with you.</p> <p>Private Internet Access explains here why the warnings show up.</p>"},{"location":"errors/openvpn/#interrupted-system-call","title":"Interrupted system call","text":"<p>It may happen, quite rarely though, that Openvpn is killed in a loop by the host system.</p> <p>Even if it runs in a container, because it shares the tunnel device with the host, the host can make it fail.</p> <p>If you get regularly in your logs</p> <pre><code>openvpn: Sun May 10 19:23:37 2020 Initialization Sequence Completed\nopenvpn: Sun May 10 19:23:45 2020 event_wait : Interrupted system call (code=4)\nopenvpn: Sun May 10 19:23:45 2020 ERROR: Linux route delete command failed: external program exited with error status: 2\nopenvpn: signal: killed\n</code></pre> <p>It might be another app you have interfering with the <code>/dev/net/tun</code> device and thus killing openvpn.</p> <p>For QNAP users, it may be the QCenter. More information on this issue and many thanks for @AlexAlbright for finding the root cause through trial and error \ud83c\udf88</p>"},{"location":"errors/routing/","title":"Routing common errors","text":"<p>There can be various issues regarding the firewall, routing and rules manipulation depending on your host environment.</p>"},{"location":"errors/routing/#cannot-list-rules-operation-not-supported","title":"<code>cannot list rules: operation not supported</code>","text":"<p>Your Kernel might be missing <code>CONFIG_IP_MULTIPLE_TABLES=y</code>.</p> <p>Reported by mfizz1 here.</p>"},{"location":"errors/tun/","title":"TUN device common errors","text":"<p>There can be various issues regarding the TUN device depending on your host environment.</p>"},{"location":"errors/tun/#cannot-unix-open-tun-device-file-operation-not-supported","title":"<code>cannot Unix Open TUN device file: operation not supported</code>","text":"<p>This usually means you do not have the <code>tun</code> kernel module.</p> <p>Usually loading the module on your host with <code>insmod /lib/modules/tun.ko</code> or <code>modprobe /lib/modules/tun.ko</code> should do the trick.</p> <p>Otherwise you might have to re-compile your Kernel with the <code>tun</code> module.</p>"},{"location":"errors/tun/#cannot-unix-open-tun-device-file-no-such-device","title":"<code>cannot Unix Open TUN device file: no such device</code>","text":"<p>This is still unclear why this is caused, but probably running the container with <code>--device /dev/net/tun</code> solves it.</p> <ul> <li>Issue opened by @iceball09</li> <li>Resolution comment by @YanisKyr</li> </ul>"},{"location":"errors/tun/#cannot-create-tun-device-file-node-operation-not-permitted","title":"<code>cannot create TUN device file node: operation not permitted</code>","text":"<p>This can happen when running LXC containers.</p> <ol> <li>Find your LXC container number, let's call it <code>12345</code></li> <li> <p>~~Edit <code>/etc/pve/lxc/12345.conf</code> and add:~~ -&gt; OUTDATED!</p> <pre><code>lxc.cgroup2.devices.allow: c 10:200 rwm\nlxc.mount.entry: /dev/net dev/net none bind,create=dir\nlxc.mount.entry: /dev/net/tun dev/net/tun none bind,create=file\n</code></pre> </li> <li> <p>Since Proxmox 8.1 you can add devices to your lxc container and no longer have to rewrite the permissions to your tun device which is a security risk</p> <ol> <li>run this commands at your pve host system to SET device</li> </ol> <pre><code>pct set 123245 -dev0 /dev/net/tun\npct reboot 12345\n</code></pre> <ol> <li>run this commands at your pve host system to UNSET device</li> </ol> <p>```sh   pct set 12345 -delete dev0   pct reboot 12345   ````</p> </li> <li> <p>In your run command or docker-compose.yml, use:</p> <pre><code>--device /dev/net/tun:/dev/net/tun\n</code></pre> <p>or</p> <pre><code>devices:\n  - /dev/net/tun:/dev/net/tun\n</code></pre> </li> </ol> <p>Thanks to @Vendetta1985, source comment</p>"},{"location":"errors/tun/#tun-device-is-not-available-open-devnettun-permission-denied","title":"<code>TUN device is not available: open /dev/net/tun: permission denied</code>","text":"<p>This can happen with <code>podman</code>, usually due to SELinux. Create a SELinux policy to allow the rootless container to use the <code>/dev/net/tun</code> device.</p> <ol> <li> <p>Copy the content below to a new file <code>gluetun_policy.te</code></p> <pre><code>module gluetun_policy 1.0;\n\nrequire {\n        type tun_tap_device_t;\n        type container_file_t;\n        type container_t;\n        class chr_file { getattr ioctl open read write };\n        class sock_file watch;\n}\n</code></pre> </li> <li> <p>Convert it to a policy module: <code>checkmodule -M -m -o gluetun_policy.mod gluetun_policy.te</code></p> </li> <li>Compile the policy: <code>semodule_package -o gluetun_policy.pp -m gluetun_policy.mod</code></li> <li>Install the policy: <code>semodule -i gluetun_policy.pp</code></li> </ol> <p>Alternatively generate the policy yourself:</p> <ol> <li> <p>Start the container and extract the SELinux policy</p> <pre><code>sudo grep gluetun /var/log/audit/audit.log | audit2allow -a -M gluetun_policy\n</code></pre> </li> <li> <p>Inspect the policy <code>cat gluetun_policy.te</code></p> </li> <li>Install it with <code>semodule -i gluetun_policy.pp</code> Another solution is to run the container with <code>--privileged</code>.</li> </ol> <p>Thanks to @OkanEsen, source comment</p>"},{"location":"errors/tun/#cannot-unix-open-tun-device-file-operation-not-permitted-and-cannot-create-tun-device-file-node-operation-not-permitted","title":"<code>cannot Unix Open TUN device file: operation not permitted</code> and <code>cannot create TUN device file node: operation not permitted</code>","text":"<p>This happens on LXC containers.</p> <ol> <li>Find your container number, let's call it <code>12345</code></li> <li> <p>~~Edit <code>/etc/pve/lxc/12345.conf</code> and add:~~ -&gt; OUTDATED!</p> <pre><code>lxc.cgroup2.devices.allow: c 10:200 rwm\nlxc.mount.entry: /dev/net dev/net none bind,create=dir\nlxc.mount.entry: /dev/net/tun dev/net/tun none bind,create=file\n</code></pre> </li> <li> <p>Since Proxmox 8.1 you can add devices to your lxc container and no longer have to rewrite the permissions to your tun device which is a security risk</p> <ol> <li>run this commands at your pve host system tu SET device</li> </ol> <pre><code>pct set 123245 -dev0 /dev/net/tun\npct reboot 12345\n</code></pre> <ol> <li>run this commands at your pve host system to UNSET device</li> </ol> <p>```sh   pct set 12345 -delete dev0   pct reboot 12345   ````</p> </li> <li> <p>In your run command or docker-compose.yml, use:</p> <pre><code>--device /dev/net/tun:/dev/net/tun\n</code></pre> <p>or</p> <pre><code>devices:\n  - /dev/net/tun:/dev/net/tun\n</code></pre> </li> </ol> <p>\ud83d\ude4f thanks to @user037951, source discussion. \ud83d\ude4f thanks to @Vendetta1985, source comment</p>"},{"location":"errors/tun/#cannot-unix-open-tun-device-file-operation-not-permitted","title":"<code>cannot Unix Open TUN device file: operation not permitted</code>","text":""},{"location":"errors/tun/#kubernetes","title":"Kubernetes","text":"<p>This can occur due to a change in containerd that restricts access to the tun device from un-priviledged containers.</p> <p>To resolve, ensure the container is marked as privileged:</p> <pre><code>containers:\n  - image: ghcr.io/qdm12/gluetun:&lt;version&gt;\n    securityContext:\n      privileged: true\n</code></pre> <p>There is some additional context and discussion on this issue on the tailscale project.</p>"},{"location":"errors/tun/#creating-tun-device-file-node-file-exists","title":"<code>creating TUN device file node: file exists</code>","text":"<p>Either:</p> <ul> <li>You need to run your Docker command as root by prefixing it with <code>sudo</code>. \ud83d\ude4f thanks to @jnelle, source comment</li> <li>You have a mismatch between your Kernel and the installed tun module. This can happen when upgrading your system and not rebooting. A simple reboot might fix it. \ud83d\ude4f thanks to @aviolaris, original issue</li> <li>Validate if the module <code>tun</code> is loaded correctly in the current kernel, see the original issue</li> </ul>"},{"location":"faq/","title":"FAQ","text":"<p>This directory contains some questions you may have and their answers. Each file contains a separate topic.</p> <ul> <li>Firewall</li> <li>Healthcheck</li> <li>Bandwidth speeds</li> <li>Wireguard</li> <li>Other explanations</li> </ul>"},{"location":"faq/bandwidth/","title":"Bandwidth speeds","text":"<p>You might wonder why your bandwidth is slower in certain situations.</p> <p>I ran multiple tests using different clients, servers and regions to clarify all this.</p>"},{"location":"faq/bandwidth/#conclusions","title":"Conclusions","text":"<ul> <li>The further away the VPN server is, the slower the bandwidth will be</li> <li>Running Docker on a VM/Windows/OSX brings a serious bottleneck due to virtualization</li> <li>The VPN protocol (<code>VPN_TYPE=openvpn</code> or <code>VPN_TYPE=wireguard</code>):</li> <li><code>wireguard</code> is almost always slower than <code>openvpn</code>, maybe due to server load.</li> <li><code>wireguard</code> does have a more significant impact on low power devices (+15% speeds)</li> <li>Wireguard running in the kernel space can bring significant gains, depending on the device (see this report)</li> <li>VPN server for OpenVPN and Wireguard are often not the same even for the same location, and so have different server load</li> <li>The speedtest server can give very different results over time</li> <li>The difference of results from one speedtest server to another (even in the same city) can be largely different</li> <li>Bandwidth fluctuates during the day due to other VPN clients on a particular server</li> <li>Some VPN providers may:</li> <li>throttle down the download bandwidth when you run a speedtest (e.g. Mullvad)</li> <li>allocate you less bandwidth if you don't use their proprietary software</li> <li>Docker might be a bandwidth bottleneck, compared to Pods (see below bjoli's investigation)</li> </ul>"},{"location":"faq/bandwidth/#investigations","title":"Investigations","text":"<ul> <li>Running OpenVPN or Wireguard natively on Windows gives higher bandwidths than when using a container on a Linux host. This is even stranger since Wireguard is supported, since its implementation is the same one for both Gluetun and the Wireguard Windows client. My only explanation is that Docker causes a bottleneck. This should be investigated once gluetun can be run out of a container as a binary.</li> </ul> <p>\ud83d\udc81 @bjoli reported that running Gluetun and other containers in the same Pod using Podman gives great bandwidth results! So this might all be due to simply Docker.</p> <p>\ud83d\udc81</p>"},{"location":"faq/bandwidth/#testing","title":"Testing","text":""},{"location":"faq/bandwidth/#setup","title":"Setup","text":"<ul> <li>I'm based in Montreal Canada</li> <li>My bandwidth without VPN is around 1Gbps up and down.</li> <li>Gluetun <code>v3.24.0</code> is used</li> <li>The Mullvad VPN service provider is used</li> <li> <p>We test on multiple machines:</p> Nickname Host OS Docker CPU CPU arch CPU virtual cores <code>windows</code> Windows Docker desktop on WSL2 AMD 5900x <code>amd64</code> <code>24</code> <code>arch</code> Arch Linux Docker AMD 2600x <code>amd64</code> <code>12</code> </li> <li> <p>We use <code>speedtest-cli</code> to test the bandwidth on all speedtest hosts with:</p> <pre><code>speedtest-cli --no-upload --server &lt;server-id&gt;\n</code></pre> <p>On Windows I use: <code>speedtest -s &lt;server-id&gt;</code></p> </li> <li> <p>We use the following Speedtest servers</p> Nickname ID Name Distance to VPN server <code>amsterdam</code> <code>26425</code> ExtraIP (Amersfoort, Netherlands) 41.77 km <code>montreal</code> <code>4393</code> TELUS (Montreal, QC, Canada) 0.35 km </li> </ul>"},{"location":"faq/bandwidth/#results","title":"Results","text":"<p>Note: <code>native</code> client host means we run the Windows program without Docker.</p> VPN server Speedtest server Machine VPN client host Speedtest host Protocol Highest of 3 download Mbps <code>nl-ams-001</code> <code>amsterdam</code> <code>arch</code> <code>gluetun</code> <code>gluetun</code> <code>openvpn</code> <code>110</code> <code>nl1-wireguard</code> <code>amsterdam</code> <code>arch</code> <code>gluetun</code> <code>gluetun</code> <code>wireguard</code> <code>85</code> <code>nl-ams-001</code> <code>amsterdam</code> <code>windows</code> <code>gluetun</code> <code>gluetun</code> <code>openvpn</code> <code>54</code> <code>nl1-wireguard</code> <code>amsterdam</code> <code>windows</code> <code>gluetun</code> <code>gluetun</code> <code>wireguard</code> <code>42</code> <code>nl-ams-001</code> <code>amsterdam</code> <code>windows</code> native native <code>openvpn</code> <code>206</code> <code>nl1-wireguard</code> <code>amsterdam</code> <code>windows</code> native native <code>wireguard</code> <code>115</code> <code>ca-mtr-101</code> <code>montreal</code> <code>arch</code> <code>gluetun</code> <code>gluetun</code> <code>openvpn</code> <code>310</code> <code>ca10-wireguard</code> <code>montreal</code> <code>arch</code> <code>gluetun</code> <code>gluetun</code> <code>wireguard</code> <code>310</code> <code>ca-mtr-101</code> <code>montreal</code> <code>windows</code> <code>gluetun</code> <code>gluetun</code> <code>openvpn</code> <code>194</code> <code>ca10-wireguard</code> <code>montreal</code> <code>windows</code> <code>gluetun</code> <code>gluetun</code> <code>wireguard</code> <code>210</code> <code>ca-mtr-101</code> <code>montreal</code> <code>windows</code> native native <code>openvpn</code> <code>530</code> <code>ca10-wireguard</code> <code>montreal</code> <code>windows</code> native native <code>wireguard</code> <code>512</code>"},{"location":"faq/firewall/","title":"Firewall","text":"<p>The firewall takes care to only allow necessary network traffic to and from Gluetun. It also effectively acts as a kill switch in case the VPN connection goes down, blocking all traffic.</p>"},{"location":"faq/firewall/#default-behavior","title":"Default behavior","text":"<p>The firewall is rather strict by default:</p> <ul> <li>it drops any incoming traffic except from your Docker network on the (non VPN) default route found.</li> <li>it drops any outgoing traffic except to the combination VPN network interface + VPN server IP address + VPN server port + VPN server protocol.</li> <li>it drops any forwarding traffic</li> </ul>"},{"location":"faq/firewall/#customization","title":"Customization","text":"<p>The firewall can be adjusted, see the Firewall options.</p>"},{"location":"faq/firewall/#timing","title":"Timing","text":"<p>Its setup happens at container start and takes about 15 milliseconds from start. This cannot be reduced further, since setting the firewall rules already takes 10 milliseconds. It is also unlikely Docker connected containers would connect to Gluetun before it sets up its firewall, and the built-in proxies only get started after the firewall is enabled.</p> <p>The firewall is never de-activated.</p>"},{"location":"faq/firewall/#implementation-details","title":"Implementation details","text":"<p>The firewall for now uses <code>iptables</code> (<code>iptables-nft</code> preferred, and falls back on <code>iptables-legacy</code>) and <code>ip6tables</code> (<code>ip6tables-nft</code> preferred, and falls back on <code>ip6tables-legacy</code>), which are called using Go custom Go code using a subshell. Most of this code resides in the <code>internal/firewall</code> package.</p>"},{"location":"faq/healthcheck/","title":"Healthcheck","text":""},{"location":"faq/healthcheck/#unhealthy","title":"Unhealthy","text":"<p>You might see from time to time</p> <pre><code>INFO [healthcheck] program has been unhealthy for 6s: restarting VPN\n</code></pre> <p>This is the VPN auto-healing because the healthcheck kept on failing for the last 6 seconds. This is NOT the Docker healthcheck, but the internal healthcheck built-in the program.</p> <p>If you see it repeating and increasing in time (6s, then 12s, etc.), it means the VPN keeps on not working even after reconnecting. In this case, this usually means by order of likeliness:</p> <ol> <li>The VPN server IP address you are trying to connect to is no longer valid \ud83d\udd0c Update your server information</li> <li>The VPN server crashed \ud83d\udca5, try changing your VPN servers filtering options such as <code>SERVER_REGIONS</code></li> <li>Maybe the Docker image you are running runs wrong, try a previous tag.</li> <li>Your host firewall is blocking outbound connections</li> <li>Your Internet connection is not working \ud83e\udd2f, ensure it works</li> <li>Lower your MTU with <code>WIREGUARD_MTU</code> or <code>OPENVPN_MSSFIX</code> (see <code>--mssfix</code>) environment variables</li> </ol> <p>Other errors might show before the <code>program has been unhealthy for 6s</code> message is logged, such as:</p> <ul> <li><code>...: connection refused</code>: the firewall blocks it because the VPN is not working. This notably happens for the <code>ip getter</code>, the <code>healthcheck</code>, the <code>dns</code> subroutines.</li> <li><code>...: operation not permitted</code>: not permitted by the firewall</li> <li><code>...: i/o timeout</code> and <code>...: Client.Timeout awaiting for headers</code>: the VPN server is not responding</li> </ul> <p>All of the above are NOT causes, but consequences of the VPN not working.</p> <p>\u26a0\ufe0f DO NOT OPEN AN ISSUE \u26a0\ufe0f about this kind of problem because:</p> <ul> <li>it is almost always due to the VPN or authentication servers misbehaving - I cannot do anything about it</li> <li>someone opens a similar issue every week, and it's getting very repetitive.</li> <li>I need to focus on more important fixes/features/maintenance I can do something about.</li> </ul>"},{"location":"faq/healthcheck/#internal-healthcheck","title":"Internal healthcheck","text":"<p>The internal healthcheck runs from the start of the program, and cannot be disabled. It TCP dials the address specified by <code>HEALTH_TARGET_ADDRESS</code>, which defaults to <code>cloudflare.com:443</code>. The TCP dialing is a small operation which barely exchanges any data, and has a timeout of 3 seconds.</p> <p>This internal healthcheck runs on different periods:</p> <ul> <li>if the previous check failed, it retries directly after, increasing the request timeout by 2 seconds each time, up to 10 seconds.</li> <li>if the previous check succeeded, it runs again after 5 seconds.</li> </ul> <p>This healthcheck keeps a state of the health status which is accessible through an HTTP health server listening on the address specified by <code>HEALTH_SERVER_ADDRESS</code>, which defaults to <code>127.0.0.1:9999</code>.</p>"},{"location":"faq/healthcheck/#internal-auto-healing","title":"Internal auto-healing","text":"<p>There is an auto-healing feature to restart the VPN client without restarting the container.</p> <p>This was designed and implemented because:</p> <ol> <li>Containers connected to Gluetun lose connection once Gluetun is restarted</li> <li>OpenVPN tend to lose connection from time to time, for no precise reason</li> </ol> <p>This auto-healing uses the internal healthcheck together with a timer to monitor when to trigger a restart.</p> <ul> <li>At program start, it waits 6 seconds, which can be altered with <code>HEALTH_VPN_DURATION_INITIAL</code></li> <li>After a successful internal healthcheck, it would wait 6 seconds of failed healthchecks before restarting the VPN client</li> <li>After a restart of the VPN client, the timeout is increased from 6 seconds to 6+5 seconds, to increase the time allowed for the VPN to setup and reduce log spamming. Each next failure will increase the timeout by 5 seconds. This time increment  can be altered with <code>HEALTH_VPN_DURATION_ADDITION</code></li> </ul>"},{"location":"faq/healthcheck/#docker-healthcheck","title":"Docker healthcheck","text":"<p>The Docker healthcheck is defined in the Dockerfile.</p> <p>As of today (2022-03-30), it is:</p> <pre><code>HEALTHCHECK --interval=5s --timeout=5s --start-period=10s --retries=1 CMD /gluetun-entrypoint healthcheck\n</code></pre> <p>Note: this does not apply for example to Kubernetes, which does not run the healthcheck defined in the image by default.</p> <p>This command executes the same Gluetun program in 'healthcheck mode', which is a quick and ephemeral operation.</p> <p>It queries the health HTTP server of the long running instance of Gluetun (at <code>http://127.0.0.1:9999/</code>). The response can either be:</p> <ul> <li>Status <code>200 OK</code> if Gluetun is healthy</li> <li>Status <code>500 Internal server error</code> together with an error message string, if Gluetun is unhealthy</li> </ul> <p>The ephemeral Gluetun instance will then exit with code <code>0</code> if the long running instance is healthy, and with code <code>1</code> otherwise.</p> <p>The healthcheck starts after 10 seconds, runs every 5 seconds, times out after 5 seconds, and fails after 1 failure. This is as such to show the container as unhealthy as soon as possible.</p> <p>You can change these values as well as the healthcheck command. For example:</p> <ul> <li>Docker run healthcheck flags</li> <li>Docker-compose healthcheck</li> </ul>"},{"location":"faq/others/","title":"Explanations","text":""},{"location":"faq/others/#what-files-does-it-download-after-tunneling","title":"What files does it download after tunneling","text":"<p>If <code>DOT=off</code>, Unbound won't run and therefore no file will be downloaded by the program at all.</p> <p>If <code>DOT=on</code>, after tunneling, it downloads at start (and periodically if <code>DNS_UPDATE_PERIOD</code> is not <code>0</code>):</p> <ul> <li>DNS named root and the DNS root key for Unbound</li> <li>If <code>BLOCK_MALICIOUS=on</code>: Malicious hostnames and IP addresses block lists for Unbound</li> <li>If <code>BLOCK_SURVEILLANCE=on</code>: Surveillance hostnames and IP addresses block lists for Unbound</li> <li>If <code>BLOCK_ADS=on</code>: Ads hostnames and IP addresses block lists for Unbound</li> </ul>"},{"location":"faq/others/#server-information","title":"Server information","text":"<p>Gluetun uses IP addresses instead of hostnames to connect to VPN servers, to avoid doing a DNS resolution at start.</p> <p>The main reason is Gluetun should not have connectivity before it establishes the VPN connection, such that connected containers (or other machines) won't leak their data out for the few starting seconds.</p> <p>The program comes with more than 10,000 IP addresses built in the program, split for each VPN provider supported.</p> <p>These however can get outdated. In this case, you have multiple options:</p> <ul> <li>Pull the latest Docker image <code>docker pull qmcgaw/gluetun</code>. I update myself the server information hardcoded in the program from time to time, so you will get new ones by updating gluetun.</li> <li>Update the VPN servers list yourself.</li> </ul>"},{"location":"faq/others/#what-is-all-this-go-code","title":"What is all this Go code","text":"<p>The Go code was essentially a big rewrite of the previous shell entrypoint. It now acts a supervisor program, and has a built-in HTTP control server.</p> <p>It allows for:</p> <ul> <li>better testing</li> <li>better maintainability</li> <li>ease of implementing new features</li> <li>faster start time</li> <li>asynchronous/parallel operations</li> <li>Restarting openvpn/unbound when needed without quitting the container</li> </ul> <p>It is mostly made of the internal directory and the entry Go file cmd/main.go.</p>"},{"location":"faq/wireguard/","title":"Wireguard","text":""},{"location":"faq/wireguard/#implementation","title":"Implementation","text":"<p>The Wireguard implementation will be your Kernel Wireguard implementation if it is present. Otherwise, the Go user space Wireguard implementation is used, which is based on imported packages from git.zx2c4.com/wireguard-go.</p>"},{"location":"faq/wireguard/#performance","title":"Performance","text":"<p>Wireguard is often known as so much faster than OpenVPN. Let's find out!</p> <ul> <li>Gluetun <code>v3.24.0</code> is used</li> <li>The Mullvad VPN service provider is used</li> <li>Gluetun is connected to the closest VPN server. This is to better measure the performance of the protocol, instead of the various bandwidth bottlenecks on a further away server.</li> <li> <p>The following command is used to measure bandwidth performance:</p> <pre><code>docker run -it --rm --network=container:gluetun alpine:3.20 /bin/sh -c \"apk add speedtest-cli &amp;&amp; speedtest-cli\"\n</code></pre> </li> </ul> Host OS CPU CPU arch CPU cores Protocol Download Mbps Upload Mbps Wireguard download increase Wireguard upload increase Windows with Docker desktop on WSL2 AMD 5900x <code>amd64</code> <code>12</code> OpenVPN <code>299.24</code> <code>463.69</code> Windows with Docker desktop on WSL2 AMD 5900x <code>amd64</code> <code>12</code> Wireguard <code>298.55</code> <code>493.49</code> -0.23% +5% Arch Linux AMD 2600x <code>amd64</code> <code>6</code> OpenVPN <code>645.91</code> <code>481.25</code> Arch Linux AMD 2600x <code>amd64</code> <code>6</code> Wireguard <code>673.37</code> <code>561.28</code> +4.2% +16.6% Raspbian (32 bit) Raspberry Pi 4 A72 <code>arm64</code> <code>4</code> OpenVPN <code>50</code> <code>10</code> Raspbian (32 bit) Raspberry Pi 4 A72 <code>arm64</code> <code>4</code> Wireguard <code>57</code> <code>10</code> <code>+14%</code> <code>+0%</code> <p>Conclusions:</p> <ul> <li>Docker desktop on Windows sucks network performance wise \ud83d\ude06</li> <li>On the usual amd64 CPUs, Wireguard is only 4.2% faster than OpenVPN (comparing the 2 maximum bandwidths <code>645.91</code> and <code>673.37</code>)</li> <li>On low power devices such as Raspberry Pis, the performance jump is more significant, with a 14% download bandwidth increase over OpenVPN (tested by @granroth)</li> </ul> <p>Further investigations:</p> <ul> <li>[ ] Does Wireguard have a bigger impact on many cores and low single thread performance CPUs?</li> </ul>"}]}